
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
//import java.util.List;
import java.util.Random;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author IvanRosalesMartinez92
 */
public class Creator extends javax.swing.JFrame {

    /**
     * Creates new form Creator
     */
    public Creator() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        EntraNodos = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        EntraAristas = new javax.swing.JTextField();
        ERDOS = new javax.swing.JToggleButton();
        jLabel4 = new javax.swing.JLabel();
        GILBERT = new javax.swing.JButton();
        GEOGRAFICO = new javax.swing.JButton();
        BARABASI = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        EntraProba = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        EntraGrado = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        SOURCE = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        SourceDFS = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        NodoS = new javax.swing.JTextField();
        NodoT = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Generador de Grafos");
        setBackground(new java.awt.Color(153, 255, 102));

        jLabel1.setText("Proporciona el número de Nodos:");

        EntraNodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EntraNodosActionPerformed(evt);
            }
        });

        jLabel2.setText("(ERDOS) Número de Aristas:");

        ERDOS.setBackground(new java.awt.Color(51, 255, 255));
        ERDOS.setText("ERDOS");
        ERDOS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ERDOSActionPerformed(evt);
            }
        });

        jLabel4.setText("Selecciona una opción:");

        GILBERT.setBackground(new java.awt.Color(0, 255, 255));
        GILBERT.setText("GILBERT");
        GILBERT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GILBERTActionPerformed(evt);
            }
        });

        GEOGRAFICO.setBackground(new java.awt.Color(0, 255, 255));
        GEOGRAFICO.setText("GEOGRAFICO");
        GEOGRAFICO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GEOGRAFICOActionPerformed(evt);
            }
        });

        BARABASI.setBackground(new java.awt.Color(0, 255, 255));
        BARABASI.setText("BARABASI");
        BARABASI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BARABASIActionPerformed(evt);
            }
        });

        jLabel5.setText("Probabilidad:");

        EntraProba.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EntraProbaActionPerformed(evt);
            }
        });

        jLabel6.setText("(GILBERT)");

        EntraGrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EntraGradoActionPerformed(evt);
            }
        });

        jLabel7.setText("(BARABASI) Grado maximo de nodos");

        jLabel8.setText("SOURCE BFS");

        SourceDFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SourceDFSActionPerformed(evt);
            }
        });

        jLabel9.setText("SOURCE DFS");

        jLabel10.setText("Nodo S");

        NodoS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NodoSActionPerformed(evt);
            }
        });

        jLabel11.setText("Nodo T");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(EntraNodos, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(EntraAristas, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel5))
                                    .addComponent(jLabel7))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(EntraGrado, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(EntraProba, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(SOURCE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                                .addComponent(SourceDFS)
                                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel10)
                                .addComponent(NodoS, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(GILBERT, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                            .addComponent(ERDOS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BARABASI, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(GEOGRAFICO, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(NodoT, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(EntraNodos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EntraAristas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SOURCE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(EntraProba, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(SourceDFS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EntraGrado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NodoS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(GEOGRAFICO, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                        .addComponent(jLabel11))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ERDOS, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 3, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GILBERT, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(NodoT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(BARABASI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EntraNodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EntraNodosActionPerformed
        // TODO add your handling code here:
       
             
        
    }//GEN-LAST:event_EntraNodosActionPerformed

    private void ERDOSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ERDOSActionPerformed
                                                   
                  // TODO add your handling code here:
                  String n;
                  String m;
                  Integer x;
                  Integer y;
                  Integer z;
                  int a;
                  int mat;
                  int gordo;
                  
                 // Boolean valor;
                  String Contiene = null;
                  String ContieneI;
                  String Ini = null;
                  String Fin = null;
                  int fat = 0;
                  
                  n = EntraNodos.getText(); //obtengo el valor del teclado lo mando a n.
                  System.out.println("n = "+n);
                  
                  
                  m = EntraAristas.getText(); //obtengo el valor del teclado lo mando a m.
                  System.out.println("m = "+m);
                  
                  x = Integer.parseInt(n);//convierto el valor "n" en entero.
                  z = Integer.parseInt(m);//convierto el valor "m" en entero.
                  
                  mat = x;
                  
                  a= z;
                  int r1;
                  
                  HashMap<Integer, Nodos> A = new HashMap<>();
                  //HashMap<Integer, Aristas> B = new HashMap<>();
                  HashMap<String, Aristas> B = new HashMap<>();
                  HashMap<Integer, Aristas> BK = new HashMap<>();
                  HashMap<Integer, Aristas> BKI = new HashMap<>();
                
                  Stack<Integer> pilaf = new Stack<Integer>();
                  Stack<Integer> pilak = new Stack<Integer>();
                  
                  ArrayList<Integer> OkGordo = new ArrayList<Integer>();
                  
                  for(int i=0; i<x; i++){   //Aqui creo x numero de objetos nodos.
                      
                      Nodos cosa = new Nodos();
                      cosa.setId(i);
                      A.put(i, cosa);
                     
                      //System.out.println(cosa.getId());
                  }
                  //HashNodos poner = new HashNodos();
             
                  
                  
                  Nodos prueba1 = new Nodos();//Estos los ocupo solo para guardar
                  Nodos prueba2 = new Nodos();
                  
                  
                  int s1;
                  
                  for(int j=0; j<z; j++){   //Aqui empiezo el proceso de crear aristas
                      
                      Random r = new Random();    //Creo un random
                      r1 = (int)(r.nextDouble() *x);      //hago entero el random lo limito a x.
                      
                      Random s = new Random();    //Creo un random
                      s1 = (int)(s.nextDouble() *x);     //hago entero el random lo limito a x
                      
                      prueba1 = A.get(r1);
                      prueba2 = A.get(s1);
                      
                      String cadena1;
                      String cadena2;
                      cadena1 = Integer.toString(s1);//Toda esta parte es para guardar String's
                      cadena2 = Integer.toString(r1);//En un arreglo "Vecinos"
                      
                      ArrayList Tonta1;   // Asi cada nodo tiene ese arreglo y se va guardando
                      ArrayList Tonta2;   //Todos los nodos que tiene adyacente ese mismo nodo.
                      
                      Tonta1=prueba1.getVecino();
                      Tonta2=prueba2.getVecino();
                      
                      
                       Ini = String.valueOf(prueba1.getId());
                        Fin = String.valueOf(prueba2.getId());
                        Contiene = Ini+"--"+Fin;
                        ContieneI = Fin+"--"+Ini;
                     
                      if(s1 == r1 || B.containsKey(Contiene)==true|| B.containsKey(ContieneI)==true){//PARA EVITAR QUE SEAN AUTODIRIGIDAS********************************
                          j = j-1;
                      }
                      else{
                          
                          Aristas cosita = new Aristas();//Aqui comienzo a construir las aristas
                          
                          
                           
                          //valor = B.containsKey(Contiene);
                          
                          
                          //if (valor == false){
                              
                              
                          cosita.setStart(prueba1.getId());//Cada arista tiene el nombre del nodo donde empieza
                          cosita.setEnd(prueba2.getId());//Cada arista tiene el nombre del nodo donde termina.
                          cosita.setName(j);//Este es el nombre de la arista (me sirvio para ver donde se repetian).
                          Random vo = new Random();    //Creo un random
                        gordo = (int)(vo.nextDouble() *1000);
                       
                        while (OkGordo.contains(gordo)==true)//PARA EVITAR QUE SE REPITAN LOS PESOS
                        {
                        Random v2 = new Random();    //Creo un random
                        gordo = (int)(v2.nextDouble() *1000);
                            
                        }
                        
                          //System.out.println("el peso es "+gordo);
                        //cosita.setValor(Ini+"--"+Fin);
                        OkGordo.add(gordo);
                          cosita.setPeso(gordo);//AQUI ASIGNO EL PESO A LAS ARISTAS
                         fat = fat + gordo;
                        
                        //Contiene2 = Fin+"--"+Ini;
                       
                          
                          
                          
                          B.put(Contiene, cosita);
                          BK.put(gordo, cosita);//para KRUSKAL
                          BKI.put(gordo, cosita);//PARA kruskal inverso
                          pilaf.add(gordo);//para KRUSKAL
                          pilak.add(gordo);//PARA kruskal inverso
                          
                          
                          //B.put(j, cosita);//Los meto al Hash B.
                          
                          prueba1.setVecino(cadena1);//Aqui se van agregando los nodos adyacentes.
                          prueba2.setVecino(cadena2);
                          
                          //System.out.println("ES "+B.containsKey(Contiene));
                          
                      }
                          
                    
                      
                  }
             
                  try {
                      String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos PARA DIJSTRA\\DD\\ERDOS.gv";
                      File archivo = new File(ruta);
                      BufferedWriter bw = null;
                      bw = new BufferedWriter(new FileWriter(archivo));
                      bw.write("Graph G {");
                      bw.newLine();
                  
                  
                   Aristas Ayuda = new Aristas();
                   
                  
                  
                  Iterator aristas = B.keySet().iterator();
                while(aristas.hasNext()){
                    Object nextArista = aristas.next();
                    Ayuda = B.get(nextArista);                    
                    System.out.println(Ayuda.getStart()+"--"+Ayuda.getEnd()+" [label=\""+Ayuda.getPeso()+"\"]; ");
                    bw.write(Ayuda.getStart()+"--"+Ayuda.getEnd()+" [label=\""+Ayuda.getPeso()+"\"]; ");
                    bw.newLine();
                    bw.flush();
                  
                }
                  
                  bw.write("}");
                      bw.close();
                      
                  } catch (IOException ex) {
                      Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
                  }
                  
                  //int mano;
                  
                  //Aristas imprime = new Aristas();
                 /* try {
                      String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos\\ERDOS.txt";
                      File archivo = new File(ruta);
                      BufferedWriter bw = null;
                      bw = new BufferedWriter(new FileWriter(archivo));
                      bw.write("digraph G {");
                      bw.newLine();*/
                      
                      
                      //for (int l=0; l<a; l++) {
                          
                          //imprime = B.get(l);
                     
                          
                            // bw.write(imprime.getStart()+"->"+imprime.getEnd()+" [label=\""+imprime.getPeso()+"\"]; ");
                          //bw.newLine();
                          //bw.flush();
                          //Lo imprimo en consola para saber que carajos estoy haciendo.
                         // System.out.println(imprime.getStart()+"->"+imprime.getEnd()+" [label=\""+imprime.getPeso()+"\"]; "); 
                          
                          
                          //utero[Start][End] = 1;
                    // }
                      
                 
                      
                    /*  bw.write("}");
                      bw.close();
                      
                  } catch (IOException ex) {
                      Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
                  }*/
                  
                  
                  /*  for(int j=0;j<mat;j++){ //Para mostrar la matriz de adyacencias
                  for(int k=0; k<mat;k++){
                  System.out.print(utero[j][k]+" ");
                  }
                  System.out.println("");
                  }
                  System.out.println("");*/
                  
                  //****************************************************************************** BFS
                 /* Nodos help = new Nodos();
                  Nodos help1 = new Nodos();
                  Nodos help2 = new Nodos();
                  String S;
                  int s;
                  int tail;
                  int v;
                  String Vec;
                  int vec;
                  int h =0;
                  
                  S = SOURCE.getText(); //obtengo el valor del teclado lo mando a S.
                  System.out.println("El nodo raiz es "+S);
                  s = Integer.parseInt(S);//convierto el valor "S" en entero.
                  
                  
                  for(int i=0; i<mat; i++){
                      help = A.get(i);
                      
                      help.setVisit(false); // Inicializo todos los nodos en falso
                  }
                  
                  Queue<Integer> cola = new LinkedList();// Defino la cola
                  ArrayList<String> Tonta = new ArrayList<String>();
                  HashMap<Integer, ARBOL_BFS> C = new HashMap<>();
                  
                  
                  
                  tail = s;
                  help1 = A.get(s);
                  cola.add(tail);
                  
                  
                  while(cola.peek()!= null){
                      
                      // System.out.println("El nodo es "+help1.getId());
                      help1 = A.get(cola.peek());
                      tail = cola.peek();
                      Tonta = help1.getVecino();
                      //System.out.println("Los hijos son: "+Tonta);
                      v = Tonta.size();
                      
                      for(int i=0; i<v; i++){
                          ARBOL_BFS tree = new ARBOL_BFS();
                          Vec = Tonta.get(i);
                          vec = Integer.parseInt(Vec);
                          help2 = A.get(vec);
                          
                          //System.out.println("El valor padre "+help1.getVisit());
                          //System.out.println("El valor hijo "+help2.getVisit());
                          if(help2.getVisit()== false){
                              
                              tree.setEntra(tail);
                              tree.setSale(vec);
                              tree.setName(h);
                              
                              cola.add(vec);
                              C.put(h, tree);
                              //System.out.println(tree.getEntra()+"--"+tree.getSale());
                              help2.setVisit(true);
                              h = h+1;
                          }
                          else{
                              
                          }
                          
                      }
                      
                      help1.setVisit(true);
                      cola.remove(tail);
                  }
                  
                  //System.out.println("h vale " +h);
                  int hay;
                  hay = h;
                  
                  ARBOL_BFS print = new ARBOL_BFS();
                  
                  try { 
                  
                  String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos\\BFS.gv";
                  File archivo1 = new File(ruta);
                  BufferedWriter bw1 = null;
                  bw1 = new BufferedWriter(new FileWriter(archivo1));
                  bw1.write("Graph G {");
                  bw1.newLine();
                  
                      System.out.println("hay vale "+hay);
                      
                  for (int ji=0; ji<hay; ji++) {
                      
                      print = C.get(ji);
                      
                      System.out.println(print.getEntra()+"--"+print.getSale());
                      bw1.write(print.getEntra()+"--"+print.getSale());
                      bw1.newLine();
                      bw1.flush();
                  }
                  
                  
                  
                  bw1.write("}");
                  
                  bw1.close();
                  
                  
                  
                  
              } catch (IOException ex) {
            Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
        }*/
//************************************************************************************************* DFS RECURSIVO                 
                  /* String s;
                    int SDFS;
                    Nodos help = new Nodos();
                    Nodos help1 = new Nodos();
                    Nodos help2 = new Nodos();
                    int v;
                    String Vec;
                    int vec;
                    int Deep;
                 

                    s = SourceDFS.getText(); //obtengo el valor del teclado lo mando a S.
                  System.out.println("El nodo raiz es "+s);
                  SDFS = Integer.parseInt(s);//convierto el valor "S" en entero.
                  
                  
                  for(int i=0; i<mat; i++){
                      help = A.get(i);
                      
                      help.setVisit(false); // Inicializo todos los nodos en falso
                  }
                  Deep = SDFS; 
                 System.out.println("estoy mandando "+Deep);
                  ARBOL_DFS cos = new ARBOL_DFS();
                  
                  help1 = A.get(Deep);
                 HashMap<Integer, Aristas> HashD = new HashMap<>();
                  cos.setDFS(help1,A,HashD);
                 
                 
                
                HashD = cos.getDFS();
                System.out.println("el tamaño es "+HashD.size());
                Aristas ji = new Aristas();
              
                
                try { 
                  
                  String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos\\DFS.gv";
                  File archivo3 = new File(ruta);
                  BufferedWriter bw2 = null;
                  bw2 = new BufferedWriter(new FileWriter(archivo3));
                  bw2.write("Graph G {");
                  bw2.newLine();

                Iterator aristas = HashD.keySet().iterator();
                while(aristas.hasNext()){
                    Object nextArista = aristas.next();
                    ji = HashD.get(nextArista);                    
                    System.out.println(ji.getStart()+"--"+ji.getEnd());
                     bw2.write(ji.getStart()+"--"+ji.getEnd());
                      bw2.newLine();
                      bw2.flush();
                }
                 bw2.write("}");
                  
                  bw2.close();
                  
                  
              } catch (IOException ex) {
            Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
        }*/
         //*********************************************************************************DFS ITERATIVO
         /*Nodos help = new Nodos();
                  Nodos help1 = new Nodos();
                  Nodos help2 = new Nodos();
                  String S;
                  int s;
                  int duracell;
                  int v;
                  String Vec;
                  int vec;
                  int h =0;
                  int ki = 0;
                  HashMap<Integer, DFS> D = new HashMap<>();
                  S = SourceDFS.getText(); //obtengo el valor del teclado lo mando a S.
                  System.out.println("El nodo raiz es "+S);
                  s = Integer.parseInt(S);//convierto el valor "S" en entero.
                  
                  
                  for(int j=0; j<mat; j++){
                      help = A.get(j);
                      
                      help.setBool(0); // Inicializo todos los nodos en falso
                  }
                  
                    Stack<Integer> pila = new Stack<Integer>();  // Defino la pila
                  ArrayList<String> Tontah = new ArrayList<String>();
                  String hak;
                  int kj;
                  int hh = 1;
                  int fg;
                int def;
                
                  
                  
                  duracell = s;
                  help1 = A.get(s);
                  pila.addElement(duracell);
                  help1.setBool(1);// marco el nodo como visitado
                  
                  
                  while(pila.empty()==false){
                      
                      //System.out.println("El nodo es "+help1.getId());
                      help1 = A.get(pila.peek());//saco de la pila el nodo
                      duracell = pila.peek();// aqui tengo el numero del nodo que saque de la pila
                      Tontah = help1.getVecino();// aqui saco la lista de nodos adyacentes
                      //System.out.println("El valor ultimo "+pila.peek());
                      //System.out.println("Los vecinos son: "+Tontah);
                      v = Tontah.size();// saco el tamaño de la lista
                      
                      if(ki>=v){
                          pila.remove(pila.peek());
                          
                          help1 = A.get(pila.peek());//saco de la pila el nodo
                      duracell = pila.peek();// aqui tengo el numero del nodo que saque de la pila
                      Tontah = help1.getVecino();// aqui saco la lista de nodos adyacentes
                      //System.out.println("El valor ultimo "+pila.peek());
                      //System.out.println("Los vecinos son: "+Tontah);
                      v = Tontah.size();// saco el tamaño de la lista
                      ki=0;
                          
                      }
                   
                          
                          Vec = Tontah.get(ki);
                          vec = Integer.parseInt(Vec);// tengo el valor entero del primer nodo adyacente
                        
                          
                     
                          help2 = A.get(vec);// aqui saco el nodo vecino obtenido
                          
                         
                          //System.out.println("El tamaño de la pila "+pila.size());
                          
                          
                          if(help2.getBool()==0){// pregunto si el nodo adyacente ya esta marcado
                              DFS tree = new DFS();
                              
                              tree.setEntra(duracell);//coloco el valor de entrada de la arista
                              tree.setSale(vec);//coloco el valor de salida
                              tree.setName(h);
                              
                              pila.addElement(vec);//meto el nodo adyacente a la pila
                              
                         
                              //System.out.println(tree.getEntra()+"--"+tree.getSale());
                              help2.setVisit(true);//marco al nodo adyacente como visitado
                              D.put(h, tree);// meto la arista al hash
                              
                              h= h+1;
                              help2.setBool(1);
                              ki = 0;
                           
                          }
                          else{
                           
                                    ki = ki+1;
                                  //System.out.println("no acepto "+duracell+" , "+vec);
                                  for(int lk=0; lk<v; lk++){
                                    hak = Tontah.get(lk);
                                    kj = Integer.parseInt(hak);
                              
                                    Nodos N = new Nodos();     
                                    N = A.get(kj);
                            
                                    fg = N.getBool();
          
                                    hh = hh*fg;
                                  }
                                  
                                      //System.out.println("hh vale"+hh);
                                                if(hh==1){
                                                    pila.remove(pila.peek());
                                                     ki = 0; 
                                                      //System.out.println("ahora la pila vale "+pila.peek());
                                                           }
                         
                                         
                              
                          }
                          
                        def = D.size(); 
                       if(def==mat-1){
                      pila.clear();
                  }   
                     
               
                  }
         
         //**************parte para imprimir
         DFS print = new DFS();
                  
                  try { 
                  
                  String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos\\DFSiter.gv";
                  File archivo12 = new File(ruta);
                  BufferedWriter bw1 = null;
                  bw1 = new BufferedWriter(new FileWriter(archivo12));
                  bw1.write("Graph G {");
                  bw1.newLine();
                  
                      System.out.println("hay vale "+h);
                      
                  for (int ji=0; ji<h; ji++) {
                      
                      print = D.get(ji);
                      
                      System.out.println(print.getEntra()+"--"+print.getSale());
                      bw1.write(print.getEntra()+"--"+print.getSale());
                      bw1.newLine();
                      bw1.flush();
                  }
                  
                  
                  
                  bw1.write("}");
                  
                  bw1.close();
                  
                  
                  
                  
              } catch (IOException ex) {
            Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
        }//*/
         //***************************************************************************DIJSTRA
         /*  Nodos help = new Nodos();
           Nodos help3 = new Nodos();
               
                String NS;
                String NT;
                int ns;
                int nt;
                String Vec;
                int vec;
               String flecha;
               
               String crear;
               boolean Dijstra = false;
               double P;
               double suma = 0.0;
               double min;
             boolean IMPRIME = false;
             
             
              
                ArrayList<String> Tontita = new ArrayList<String>();
                
            
                double DB = fat+1;
                Aristas B1 = new Aristas();
         
                 NS = NodoS.getText(); //obtengo el valor del teclado lo mando a S.
                  System.out.println("El nodo de inicio es "+NS);
                  ns = Integer.parseInt(NS);//convierto el valor "NS" en entero.
                  
                  NT = NodoT.getText(); //obtengo el valor del teclado lo mando a T.
                  System.out.println("El nodo de final es "+NT);
                  nt = Integer.parseInt(NT);//convierto el valor "NT" en entero.
                  
                //System.out.println("fat es "+fat);
                   
                  
                  
                  Iterator Nodos = A.keySet().iterator();
                while(Nodos.hasNext()){
                    Object nextNodos = Nodos.next();
                    help = A.get(nextNodos);                    
                    
                  help3.setDijstra(fat+1);//Inicializo los nodos en infinito
                }
         
                HashMap<Double, Nodos> Order = new HashMap<>();  
                HashMap<Integer, Nodos> WAY = new HashMap<>();
                HashMap<Integer, Double> WAY2 = new HashMap<>();
                HashMap<String, Aristas> S = new HashMap<>();
                ArrayList<String> VerA = new ArrayList<String>();
                ArrayList<Integer> VerN = new ArrayList<Integer>();
                
                       
                 
                 Stack<Double> pila = new Stack<Double>();
                
                help = A.get(ns);
              VerN.add(ns);
           
                P = 0.0;
                  
                
            while (Dijstra ==false){
                    Tontita = help.getVecino();
                  //System.out.println("sus vecinos son  "+Tontita);
                  
                  
                      
                    for(int t=0;t<Tontita.size();t++){
                 
                          Vec = Tontita.get(t);
                          vec = Integer.parseInt(Vec);
                          
                          //System.out.println("el vecino entero"+vec);
                          flecha = help.getId()+"->"+vec;
                          
                          
                            if(VerA.contains(flecha)==false && VerN.contains(vec)==false)
                            {
                          //System.out.println("la flecha a buscar"+flecha);
                          B1 = B.get(flecha);   //Aqui obtengo la arista
                               
                          Nodos help1 = new Nodos();
                          help1 = A.get(vec);
                          suma = B1.getPeso()+P;
                          
                                 if(suma<help1.getDijstra())
                                {
                                help1.setDijstra(suma);//Aqui asigno el peso de la arista al nodo
                                }
                          
                          help1.setPadre(help.getId());
                          Order.put(suma, help1);//Para recuperar el nodo posteriormente
                          WAY2.put(help1.getId(), suma);//Este HASH ES PARA RECUPERAR EL VALOR DE DIJSTRA      
                          pila.add(suma);//para despuer ordenar los pesos
                          
                            }
                            
                    }//Salida del for
                    
                                      for(int u =0;u<pila.size();u++)
                                      {
                                      //System.out.println("es "+pila.get(u));
                                      DB = Math.min(DB,pila.get(u) );
                                  
                                      }
                                    
                                 //System.out.println("El valor minimo es "+DB);
                                 pila.remove(pila.indexOf(DB));
                  
                  Nodos PS = new Nodos();
                  
                  PS = Order.get(DB);
                  
                  crear = PS.getPadre()+"->"+PS.getId();
                  if(S.containsKey(crear)==false)
                  {
                  System.out.println(crear);
                  Aristas Pon = new Aristas();
                  Aristas Mira = new Aristas();
                  
                  Pon.setStart(PS.getPadre());
                  Pon.setEnd(PS.getId());
                  Mira = B.get(crear);
                  Pon.setPeso(Mira.getPeso());
                  
                  S.put(crear, Pon);//Aqui gusrdo aristas
                  PS.setDAD(PS.getPadre());//AQUI VOY METIENDO LOS PADRES
                  WAY.put(PS.getId(), PS);//Aqui guardo nodos
                  
                  VerA.add(crear);//Para verificar las aristas
                  VerN.add(PS.getId());//Para verificar los nodos que no se regrese
                  
                                if(PS.getId()==nt){
                                Dijstra = true;

                                    System.out.println("");
                                }
                                else{
                                help = A.get(PS.getId());
                                DB = fat +1;
                                P = suma;
                                
                                }
                  }
                  if(PS.getId()==nt){
                                Dijstra = true;
                                }
                                else{
                                help = A.get(PS.getId());
                                DB = fat +1;
                                
                                }
                  
                  
                  
            }//Salida del while
            
            //**************************************************PARA IMPRIMIR EL CAMINO MAS CORTO
            boolean imprime= false;
           
            
            ArrayList<Integer> VN = new ArrayList<Integer>();
            ArrayList<Integer> pt = new ArrayList<Integer>();
            
            
            Nodos PRO =new Nodos();
               
                boolean DAD = false;
                int b=0;
                double pes;
                double DJ=0.0;
                double OPV;
               
            Aristas Ayu = new Aristas();
            
             PRO = WAY.get(nt);
             
          
        
                  try{
                      String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\DIJSTRA.gv";
                      File archivo = new File(ruta);
                      BufferedWriter bw = null;
                      bw = new BufferedWriter(new FileWriter(archivo));
                      bw.write("digraph G {");
                      bw.newLine();
                    
                  while(imprime==false){
                    
                   pt = PRO.getDAD();
                    //System.out.println("Los padres son: "+pt);
                    
                while(DAD == false)
                {  
                
                
                        if(VN.contains(pt.get(b))==false)
                        {
                        
                        VN.add(PRO.getId());
                        DAD=true;
                        }
                        else
                        {
                        b=b+1;    
                        }
                
                }
                
               Ayu = B.get(pt.get(b)+"->"+PRO.getId());
              
                System.out.println(pt.get(b)+"->"+PRO.getId());
                bw.write(pt.get(b)+"->"+PRO.getId());
                Ayu = B.get(pt.get(b)+"->"+PRO.getId());
                OPV = Ayu.getPeso();
                DJ = DJ +OPV;
                bw.newLine();
                bw.flush();
                
                    bw.newLine();
                    bw.flush();
                    
                if(pt.get(b)==ns)
                    {
                      
                        imprime = true;
                    }
                    else
                    {
                    PRO = WAY.get(pt.get(b));
                    b=0;
                    }
            }
                 
                  System.out.println(ns+" [label=\""+0.0+"\"]; ");
                    bw.write(ns+" [label=\""+0.0+"\"]; ");
                    
                 
                    System.out.println(nt+" [label=\""+"nodo_"+nt+"("+DJ+")"+"\"]; ");
                    bw.write(nt+" [label=\""+"nodo_"+nt+"("+DJ+")"+"\"]; ");
                  
                  bw.write("}");
                      bw.close();
                      
                  } catch (IOException ex) {
                      Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
                  }*/
          //**********************************************************************************************KRUSKAL
                    int MAX = 0;
                    Stack<Integer> orden = new Stack<Integer>();
                    HashMap<String, Aristas> K = new HashMap<>();
                    String raya;
                    boolean Kruskal = false;
                    HashMap<Integer, Nodos> ListaN = new HashMap<>();
                    int cont = 1;
                    String cad;
                  String cad1;
                  boolean HACEDOR = true;
                  int CJ = 0; 
                  int CC;
                  String Vec; 
                  int vec;
                  int Peso;
                  
                  while(pilaf.empty()==false){
                    for(int o=0; o<pilaf.size();o++)
                  {
                  MAX = Math.max(MAX, pilaf.get(o));
                  }

           //System.out.println("max es "+MAX);
           orden.add(MAX);      //EN LA PILA orden se guardaran los valores en orden de los pesos
           pilaf.remove(pilaf.indexOf(MAX));
           MAX = 0;
                  } 
                  
                  //System.out.println("el primero es "+orden.peek());
                  
                  
                  
                  while(Kruskal == false)
                  {
                  Aristas saca = new Aristas();
                      //System.out.println("EL VALOR SIGUIENTE ES "+orden.peek());
                      Peso = orden.peek();
                  saca = BK.get(orden.pop());
                  
                  raya = saca.getStart()+"--"+saca.getEnd();
                      
                  if (ListaN.containsKey(saca.getStart())==true && ListaN.containsKey(saca.getEnd())==true)
                  {    
                  //************************************************INICIA PRUEBA
                     //System.out.println("PONDRA "+raya);
                 Nodos pru = new Nodos();
                 Nodos pru1 = new Nodos();
                 
                 pru = ListaN.get(saca.getStart());
                 pru1 = ListaN.get(saca.getEnd());
                      //System.out.println("LOS CJ "+pru.getConjunto()+" y "+pru1.getConjunto());
                      //System.out.println("");
                    if(pru.getConjunto()== pru1.getConjunto())
                    {
                     HACEDOR = false;
                        //System.out.println("SI PONGO ESTA ARISTA SE HARA UN CICLO");
                        //System.out.println(raya);
                    }
                    
                  //***********************************************FIN DE PRUEBA
                 }
                  
                  if(HACEDOR == true)
                  {
                 //System.out.println(raya);//AQUI SE IMPRIMEEEEEEE
                  
                  saca.setPeso(Peso);
                  K.put(raya, saca);
                  
                  Nodos sac = new Nodos();
                  Nodos sac1 = new Nodos();
                  
                  cad= Integer.toString(saca.getStart());
                  cad1= Integer.toString(saca.getEnd());
                  
                  if (ListaN.containsKey(saca.getStart())==true && ListaN.containsKey(saca.getEnd())==true)
                  {
                      //System.out.println("AQUI CAYO 1");
                   sac = ListaN.get(saca.getStart());
                   sac.setVecino(cad1);
                        CC = sac.getConjunto();
                        
                      sac1 = ListaN.get(saca.getEnd());
                        sac1.setVecino(cad);
                        int CM =sac1.getConjunto();
                        
                       //HAY QUE PONERLOS A TODOS LOS DEMAS
                       
                     
                      Nodos sac2 = new Nodos();
                      //System.out.println("el tamño es "+ListaN.size());
                      
                      
                      
                      Iterator aristas = ListaN.keySet().iterator();
                while(aristas.hasNext()){
                    Object nextNodos = aristas.next();
                    
                    sac2 = ListaN.get(nextNodos);//aqui tengo el objeto nodo
                     
                         
                            vec = sac2.getConjunto();
                            
                            //System.out.println("el nodo "+sac2.getId()+"tiene cj "+sac2.getConjunto());
                            if(vec==CM)
                            {
                            sac2.setConjunto(CC);//LE PONGO EL MISMO CONJUNTO A TODOS
                            //System.out.println("Al nodo "+sac2.getId()+" ponemos "+CC);
                            }
                            //System.out.println("que paso");
                      }
                   
                  }
                  
                  
                  
                  if (ListaN.containsKey(saca.getStart())==false && ListaN.containsKey(saca.getEnd())==false)//No hay ningun nodo en el arbol
                  {
                     // System.out.println("AQUI CAYO 2 ");
                  
                  sac.setId(saca.getStart());
                  sac.setConjunto(CJ);
                  sac.setVecino(cad1);
                  ListaN.put(saca.getStart(), sac);
                      //System.out.println("AL nodo "+saca.getStart()+" le ponemos "+CJ);
                  sac1.setId(saca.getEnd());
                  sac1.setConjunto(CJ);
                  sac1.setVecino(cad);
                  ListaN.put(saca.getEnd(), sac1);
                  
                  //System.out.println("AL nodo "+saca.getEnd()+" le ponemos "+CJ);
                  } 
                  
                  if (ListaN.containsKey(saca.getStart())==true && ListaN.containsKey(saca.getEnd())==false)
                  {
                  //System.out.println("AQUI CAYO 3");
                        sac = ListaN.get(saca.getStart());
                        sac.setVecino(cad1);
                        CC = sac.getConjunto();
                        
                        sac1.setId(saca.getEnd());
                        sac1.setConjunto(CC);
                        sac1.setVecino(cad);
                        ListaN.put(saca.getEnd(),sac1); 
                       // System.out.println("EL nodo "+saca.getEnd()+"ponemos cj "+CC);
                  }
                  
                  if(ListaN.containsKey(saca.getStart())==false && ListaN.containsKey(saca.getEnd())==true)
                  {
                      //System.out.println("AQUI CAYO 4");
                  sac = ListaN.get(saca.getEnd());
                  sac.setVecino(cad1);
                        CC = sac.getConjunto();
                        
                        sac1.setId(saca.getStart());
                        sac1.setConjunto(CC);
                        sac1.setVecino(cad);
                        ListaN.put(saca.getStart(),sac1); 
                //System.out.println("EL nodo "+saca.getStart()+"ponemos cj "+CC);
                  }
                  
                  
                        if(K.size()==A.size()-1)
                        {
                         Kruskal = true;   
                        }
                        
                
                  CJ = CJ +1;
                  }
                  else
                  {
                    HACEDOR = true;  
                  }
                  
                  }//fin del while
              
                  int MSTK = 0;
                  
                  System.out.println("AQUI EMPIEZA A IMPRIMIR KRUSKAL");
                  
                  try {
                      String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\AEM\\KRUSKAL.gv";
                      File archivo = new File(ruta);
                      BufferedWriter bw = null;
                      bw = new BufferedWriter(new FileWriter(archivo));
                      bw.write("Graph G {");
                      bw.newLine();
                  
                  
                   
                   Aristas AyI = new Aristas();
                 
                  
                  Iterator aristas = K.keySet().iterator();
                while(aristas.hasNext()){
                    Object nextArista = aristas.next();
                    AyI = K.get(nextArista);
                    
                    
                    
                   MSTK = MSTK +AyI.getPeso();
                    //System.out.println(AyI.getStart()+"--"+AyI.getEnd());
                    bw.write(AyI.getStart()+"--"+AyI.getEnd()+" [label=\""+AyI.getPeso()+"\"]; ");
                    bw.newLine();
                    bw.flush();
                  
                }
                  System.out.println("EL PESO TOTAL MST KRUSKAL = "+MSTK);
                  System.out.println("");
                  bw.write("}");
                      bw.close();
                      
                  } catch (IOException ex) {
                      Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
                  }
                  
                 
                  
       //******************************************************************************************************PRIM
          
         /*   String NS;
             int ns;
             boolean  Prim = false;
             boolean VALOR = false;
             String Vecz;
             int vecz;
             String flecha;
             String flechaI;
            
             String crear;
             String crearI;
             
              Stack<Integer> pilaPRIM = new Stack<Integer>();
                
              HashMap<Integer, Aristas> S = new HashMap<>();
              HashMap<String, Aristas> PRIM = new HashMap<>();
              HashMap<String, Aristas> PRIMf = new HashMap<>();
               
            
              ArrayList<Integer> RN = new ArrayList<Integer>();
                int DB = fat+1;
               
         
                 NS = NodoS.getText(); //obtengo el valor del teclado lo mando a S.
                  //System.out.println("El nodo de inicio es "+NS);
                  ns = Integer.parseInt(NS);//convierto el valor "NS" en entero.
                  
                //System.out.println("fat es "+fat);
                   Nodos help = new Nodos();
                   Nodos help3 = new Nodos();
                  
                  
                  Iterator Nodos = A.keySet().iterator();
                while(Nodos.hasNext()){
                    Object nextNodos = Nodos.next();
                    help = A.get(nextNodos);                    
                    
                  help3.setDijstra(fat+1);//Inicializo los nodos en infinito
                }
         
            Nodos help2 = new Nodos();
                
            help2 = A.get(ns);
                
            
                while (Prim ==false){
                    ArrayList<String> Tontita = new ArrayList<String>();
                    Tontita = help2.getVecino();
                  //System.out.println("sus vecinos son  "+Tontita);
                      //System.out.println("EL NODO ES "+help2.getId());
                    for(int t=0;t<Tontita.size();t++){
                 
                          Vecz = Tontita.get(t);
                          vecz = Integer.parseInt(Vecz);
                          
                          //System.out.println("el vecino entero "+vecz);
                          
                          flecha = help2.getId()+"--"+vecz;
                          flechaI = vecz+"--"+help2.getId();
                          
                          //System.out.println("la flecha a buscar "+flecha);  
                          
                            if(PRIMf.containsKey(flecha)==false && PRIMf.containsKey(flechaI)== false)
                            {
                                
                            if (B.containsKey(flecha)==false)
                                {
                                flecha = vecz+"--"+help2.getId();
                                }
                              
                          //System.out.println("considera la flecha "+flecha); 
                           Aristas Bz = new Aristas();
                          Bz = B.get(flecha);   //Aqui obtengo la arista
                                
                           Nodos help1 = new Nodos();
                          help1 = A.get(vecz);
                                
                                 if(RN.contains(vecz)== true)
                   {
                       Nodos hep1 = new Nodos();
                       hep1 = A.get(vecz);
                       if(DB < hep1.getDijstra())
                       {
                        
                        String cre;
                        cre = hep1.getPadre()+"--"+hep1.getId();
                        PRIM.remove(cre);
                       }
                   }
                                 
                                help1.setDijstra(Bz.getPeso());//Aqui asigno el peso de la arista al nodo
                           
                          pilaPRIM.add(help1.getDijstra());//para despuer ordenar los pesos
                            
                          Aristas Bb = new Aristas();
                          
                          Bb.setStart(help2.getId());
                          Bb.setEnd(vecz);
                          Bb.setPeso(Bz.getPeso());
                          S.put(help1.getDijstra(), Bb);//GUARDO PESO Y ARISTA
                            
                            
                            }
                            else
                            {
                                //System.out.println("AQUI ESTOY");
                            }
                            
                    }//Salida del for
                    
                    for(int u =0;u<pilaPRIM.size();u++)
                                      {
                                      //System.out.println("LA PILA "+pila.get(u));
                                      DB = Math.min(DB,pilaPRIM.get(u) );
                                  
                                      }
                    
                    //System.out.println("EL VALOR MINIMO "+DB);
                    pilaPRIM.remove(pilaPRIM.indexOf(DB));//LO QUITO DE LA PILA
                    
                    Aristas BN = new Aristas();
                    BN = S.get(DB);//RECUPERO LA ARISTA MINIMA
                    
                    crear = BN.getStart()+"--"+BN.getEnd();
                    crearI = BN.getEnd()+"--"+BN.getStart();
                    //System.out.println("crear es "+crear);
                    
                    
                   
                   Nodos hep = new Nodos();
                   hep = A.get(BN.getEnd());
                   hep.setPadre(BN.getStart()); 
                    
          if(RN.contains(BN.getStart())== true && RN.contains(BN.getEnd())== true)
              
          {
                VALOR = true; 
                //System.out.println("LA ARISTA RECHAZADA "+crear);
                PRIMf.put(crear, BN);
          }
            
                 if(VALOR == false)
                 {
                    BN.setPeso(DB);
                    PRIM.put(crear, BN);
                    PRIMf.put(crear, BN);
                    
                    //System.out.println(crear);//AQUI IMPRIMO EN PANTALLA*************************
                    
                    if(RN.contains(BN.getStart())==false)
                    {
                    RN.add(BN.getStart());
                    }
                    
                    if(RN.contains(BN.getEnd())==false)
                    {
                    RN.add(BN.getEnd());
                    }
                    
                 }
                    
                    //System.out.println("el tamaño es "+RN.size());
                    if(PRIM.size()==A.size()-1)
                    {
                    Prim = true;
                    }
                    else
                    {
                        
                        
                        help2 = A.get(BN.getEnd());
                        
                        
                        DB = fat+1;
                        
                        VALOR = false;
                    }
                    
                    
                    
                    
                }//fin de PRIM
              
                
                
                int MSTP = 0;
                
            System.out.println("AQUI EMPIEZA A IMPRIMIR PRIM");
                  
             
           try {
                      String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\AEM\\PRIM.gv";
                      File archivo = new File(ruta);
                      BufferedWriter bw = null;
                      bw = new BufferedWriter(new FileWriter(archivo));
                      bw.write("Graph G {");
                      bw.newLine();
            
            
                Aristas AO = new Aristas();
              
                  
                  Iterator aristas = PRIM.keySet().iterator();
                while(aristas.hasNext()){
                    Object nextArista = aristas.next();
                    AO = PRIM.get(nextArista);
                    
                    
                    MSTP = MSTP + AO.getPeso();
                    //System.out.println(AO.getStart()+"--"+AO.getEnd());
                    bw.write(AO.getStart()+"--"+AO.getEnd()+" [label=\""+AO.getPeso()+"\"]; ");
                    bw.newLine();
                    bw.flush();
                    
                }
                System.out.println("EL PESO TOTAL MST PRIM = "+MSTP);
                System.out.println("");  
                
               bw.write("}");
                      bw.close();
                      
                  } catch (IOException ex) {
                      Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
                  }*/
    }//GEN-LAST:event_ERDOSActionPerformed

    private void GILBERTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GILBERTActionPerformed
        // TODO add your handling code here:
        
        String n;
        String p;
            int x;
            int a=0;
            double p1;
            double volado;
            int mat;
            String Contiene = null;
            String Ini = null;
            String Fin = null;
            int fat = 0;
            int gordo;
            
            
            n = EntraNodos.getText(); //obtengo el valor del teclado lo mando a n.
            System.out.println("n = "+n);
            
             p = EntraProba.getText(); //obtengo el valor del teclado lo mando a p.
            System.out.println("p = "+p);
            
            x = Integer.parseInt(n);//convierto el valor "n" en entero.
            p1 = Double.parseDouble(p);//convierto el valor "p" en entero.
            
            mat =x;
            HashMap<Integer, Nodos> A = new HashMap<>();
            HashMap<String, Aristas> B = new HashMap<>();
            
            HashMap<Integer, Aristas> BK = new HashMap<>();
                  HashMap<Integer, Aristas> BKI = new HashMap<>();
                
                  Stack<Integer> pilaf = new Stack<Integer>();
                  Stack<Integer> pilak = new Stack<Integer>();
                  
                  ArrayList<Integer> OkGordo = new ArrayList<Integer>();
            
            
            for(int i=0; i<x; i++){   //Aqui creo x numero de objetos nodos.
                
                Nodos cosa = new Nodos();
                cosa.setId(i);
                A.put(i, cosa);
                //System.out.println(cosa.getId());
            }
            
            Nodos prueba1 = new Nodos();//Nadamas para guardar.
            Nodos prueba2 = new Nodos();
            
           
            for(int j=0; j<x; j++){//Empiezo a iterar los nodos.
            
            prueba1 = A.get(j);
            
         for(int k=0; k<x; k++){//Para comparar nodos con nodos.
                
            prueba2 = A.get(k);
            
            Random r = new Random();    //Creo un random
            
            double r1;
            r1 = (r.nextDouble() *10);//Lo limito hasta 10.
            volado = r1/10;// Aqui construyo mi probabilidad aleatoria.
            //System.out.println("La prob. aleatoria es "+volado);
            
                String cadena1;
                String cadena2;
                cadena1 = Integer.toString(prueba2.getId());
                cadena2 = Integer.toString(prueba1.getId());
                
                ArrayList Tonta1;//Todo este relajo para abajo agregar los nombres 
                ArrayList Tonta2;//De los nodos adyacentes en el arreglo "Vecinos"
                
                Tonta1=prueba1.getVecino();
                Tonta2=prueba2.getVecino();
            
                //Aqui la condicion para que se construyan las aristas.
            if(volado<p1 && j!=k){ //Comparo mi prob aleatoria con la prob que meto en teclado
                
                //Este if (un poco rebuscado), se asegura que no se repitan aristas
                //Pregunta en la lista de Vecinos de los nodos para que no se repitan.
                Ini = String.valueOf(prueba1.getId());
                Fin = String.valueOf(prueba2.getId());
                Contiene = Ini+"--"+Fin;
                //Tonta1.contains(cadena2)|| Tonta2.contains(cadena1)||Tonta1.contains(cadena1) ||Tonta2.contains(cadena2)
                if(B.containsKey(Contiene)== false && B.containsKey(Fin+"--"+Ini)== false)
                {
                  Aristas cosita = new Aristas();//Aqui empiezo a construir las aristas
                
                cosita.setStart(prueba1.getId());//El nombre del nodo en que empieza.
                cosita.setEnd(prueba2.getId());// El nodo del nodo en que termina.
                cosita.setName(a);//El nombre de la arista.
                
               
                a=a+1;//Para que el nombre de la arista no dependa de mis contadores for.
                
                Random vo = new Random();    //Creo un random
                        gordo = (int)(vo.nextDouble() *100000);
                       
                        while (OkGordo.contains(gordo)==true)//PARA EVITAR QUE SE REPITAN LOS PESOS
                        {
                        Random v2 = new Random();    //Creo un random
                        gordo = (int)(v2.nextDouble() *100000);
                            
                        }
                        
                          //System.out.println("el peso es "+gordo);
                        //cosita.setValor(Ini+"--"+Fin);
                        OkGordo.add(gordo);
                          cosita.setPeso(gordo);//AQUI ASIGNO EL PESO A LAS ARISTAS
                         fat = fat + gordo;
                        
                        //Contiene2 = Fin+"--"+Ini;
                       
                          
                          
                          
                          B.put(Contiene, cosita);
                          BK.put(gordo, cosita);//para KRUSKAL
                          BKI.put(gordo, cosita);//PARA kruskal inverso
                          pilaf.add(gordo);//para KRUSKAL
                          pilak.add(gordo);//PARA kruskal inverso
                          
                       
                        //cosita.setValor(Ini+"--"+Fin);
                  
                  //cosita.setPeso(gordo);//AQUI ASIGNO EL PESO A LAS ARISTAS
               
                
                prueba1.setVecino(cadena1);//LLenar los nodos adyacentes.
                prueba2.setVecino(cadena2);
                }
                else
                {
                  
                }
               
                
            }//esta es del if
    
            }//esta es del segundo for
          
            }//esta es del primero for
            
            Aristas Ayuda = new Aristas();

                  try{
                     String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\AEM\\GILBERT.gv";
                      File archivo = new File(ruta);
                      BufferedWriter bw = null;
                      bw = new BufferedWriter(new FileWriter(archivo));
                      bw.write("Graph G {");
                      bw.newLine();
                  
                  
                  Iterator aristas = B.keySet().iterator();
                while(aristas.hasNext()){
                    Object nextArista = aristas.next();
                    Ayuda = B.get(nextArista);                    
                    System.out.println(Ayuda.getStart()+"--"+Ayuda.getEnd()+" [label=\""+Ayuda.getPeso()+"\"]; ");
                    bw.write(Ayuda.getStart()+"--"+Ayuda.getEnd()+" [label=\""+Ayuda.getPeso()+"\"]; ");
                    bw.newLine();
                    bw.flush();
                  
                }
                  
                  bw.write("}");
                      bw.close();
                      
                  } catch (IOException ex) {
                      Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
                  }
             
     
            
           /* Aristas imprime = new Aristas();
              try {
            String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos\\GILBERT.gv";
            File archivo = new File(ruta);
            BufferedWriter bw = null;
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write("Graph G {");
            bw.newLine();
            
            
             for (int l=0; l<a; l++) {
              
                    imprime = B.get(l);
                    bw.write(imprime.getStart()+"--"+imprime.getEnd()+" [label=\""+imprime.getName()+"\"]; ");
                    bw.newLine();
                    bw.flush();
                    //Lo imprimo en consola para saber que carajos estoy haciendo.
                     System.out.println(imprime.getStart()+"->"+imprime.getEnd()+" [label=\""+imprime.getName()+"\"]; ");
            } 
             bw.write("}");
             
              bw.close();
            
                 } catch (IOException ex) {
            Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
        } */

              //*********************************************************************************************************** BFS
                  /*Nodos help = new Nodos();
                  Nodos help1 = new Nodos();
                  Nodos help2 = new Nodos();
                  String S;
                  int s;
                  int tail;
                  int v;
                  String Vec;
                  int vec;
                  int h =0;
                  
                  S = SOURCE.getText(); //obtengo el valor del teclado lo mando a S.
                  System.out.println("El nodo raiz es "+S);
                  s = Integer.parseInt(S);//convierto el valor "S" en entero.
                  
                  
                  for(int i=0; i<mat; i++){
                      help = A.get(i);
                      
                      help.setVisit(false); // Inicializo todos los nodos en falso
                  }
                  
                  Queue<Integer> cola = new LinkedList();// Defino la cola
                  ArrayList<String> Tonta = new ArrayList<String>();
                  HashMap<Integer, ARBOL_BFS> C = new HashMap<>();
                  
                  
                  
                  tail = s;
                  help1 = A.get(s);
                  cola.add(tail);
                  
                  
                  while(cola.peek()!= null){
                      
                      // System.out.println("El nodo es "+help1.getId());
                      help1 = A.get(cola.peek());
                      tail = cola.peek();
                      Tonta = help1.getVecino();
                      //System.out.println("Los hijos son: "+Tonta);
                      v = Tonta.size();
                      
                      for(int i=0; i<v; i++){
                          ARBOL_BFS tree = new ARBOL_BFS();
                          Vec = Tonta.get(i);
                          vec = Integer.parseInt(Vec);
                          help2 = A.get(vec);
                          
                          //System.out.println("El valor padre "+help1.getVisit());
                          //System.out.println("El valor hijo "+help2.getVisit());
                          if(help2.getVisit()== false){
                              
                              tree.setEntra(tail);
                              tree.setSale(vec);
                              tree.setName(h);
                              
                              cola.add(vec);
                              C.put(h, tree);
                              //System.out.println(tree.getEntra()+"--"+tree.getSale());
                              help2.setVisit(true);
                              h = h+1;
                          }
                          else{
                              
                          }
                          
                      }
                      
                      help1.setVisit(true);
                      cola.remove(tail);
                  }
                  
                  //System.out.println("h vale " +h);
                  int hay;
                  hay = h;
                  
                  ARBOL_BFS print = new ARBOL_BFS();
                  
                  try { 
                  
                  String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos\\BFS.gv";
                  File archivo1 = new File(ruta);
                  BufferedWriter bw1 = null;
                  bw1 = new BufferedWriter(new FileWriter(archivo1));
                  bw1.write("Graph G {");
                  bw1.newLine();
                  
                      System.out.println("hay vale "+hay);
                      
                  for (int ji=0; ji<hay; ji++) {
                      
                      print = C.get(ji);
                      
                      System.out.println(print.getEntra()+"--"+print.getSale());
                      bw1.write(print.getEntra()+"--"+print.getSale());
                      bw1.newLine();
                      bw1.flush();
                  }
                  
                  
                  
                  bw1.write("}");
                  
                  bw1.close();
                  
                  
                  
                  
              } catch (IOException ex) {
            Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
              }*/
            //************************************************************************DFS
           /* String s;
                    int SDFS;
                    Nodos help = new Nodos();
                    Nodos help1 = new Nodos();
                    Nodos help2 = new Nodos();
                    int v;
                    String Vec;
                    int vec;
                    int Deep;
                 

                    s = SourceDFS.getText(); //obtengo el valor del teclado lo mando a S.
                  System.out.println("El nodo raiz es "+s);
                  SDFS = Integer.parseInt(s);//convierto el valor "S" en entero.
                  
                  
                  for(int i=0; i<mat; i++){
                      help = A.get(i);
                      
                      help.setVisit(false); // Inicializo todos los nodos en falso
                  }
                  Deep = SDFS; 
                 System.out.println("estoy mandando "+Deep);
                  ARBOL_DFS cos = new ARBOL_DFS();
                  
                  help1 = A.get(Deep);
                 HashMap<Integer, Aristas> HashD = new HashMap<>();
                  cos.setDFS(help1,A,HashD);
                 
                 
                
                HashD = cos.getDFS();
                System.out.println("el tamaño es "+HashD.size());
                Aristas ji = new Aristas();
              
                
                try { 
                  
                  String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos\\DFS.gv";
                  File archivo3 = new File(ruta);
                  BufferedWriter bw2 = null;
                  bw2 = new BufferedWriter(new FileWriter(archivo3));
                  bw2.write("Graph G {");
                  bw2.newLine();

                Iterator aristas = HashD.keySet().iterator();
                while(aristas.hasNext()){
                    Object nextArista = aristas.next();
                    ji = HashD.get(nextArista);                    
                    System.out.println(ji.getStart()+"--"+ji.getEnd());
                     bw2.write(ji.getStart()+"--"+ji.getEnd());
                      bw2.newLine();
                      bw2.flush();
                }
                 bw2.write("}");
                  
                  bw2.close();
                  
                  
              } catch (IOException ex) {
            Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
        }*/
            //**********************************************************************DFS ITERATIVO
             /* Nodos help = new Nodos();
                  Nodos help1 = new Nodos();
                  Nodos help2 = new Nodos();
                  String S;
                  int s;
                  int duracell;
                  int v;
                  String Vec;
                  int vec;
                  int h =0;
                  int ki = 0;
                  HashMap<Integer, DFS> D = new HashMap<>();
                  S = SourceDFS.getText(); //obtengo el valor del teclado lo mando a S.
                  System.out.println("El nodo raiz es "+S);
                  s = Integer.parseInt(S);//convierto el valor "S" en entero.
                  
                  
                  for(int j=0; j<mat; j++){
                      help = A.get(j);
                      
                      help.setBool(0); // Inicializo todos los nodos en falso
                  }
                  
                    Stack<Integer> pila = new Stack<Integer>();  // Defino la pila
                  ArrayList<String> Tontah = new ArrayList<String>();
                  String hak;
                  int kj;
                  int hh = 1;
                  int fg;
                int def;
                
                  
                  
                  duracell = s;
                  help1 = A.get(s);
                  pila.addElement(duracell);
                  help1.setBool(1);// marco el nodo como visitado
                  
                  
                  while(pila.empty()==false){
                      
                      //System.out.println("El nodo es "+help1.getId());
                      help1 = A.get(pila.peek());//saco de la pila el nodo
                      duracell = pila.peek();// aqui tengo el numero del nodo que saque de la pila
                      Tontah = help1.getVecino();// aqui saco la lista de nodos adyacentes
                      //System.out.println("El valor ultimo "+pila.peek());
                      //System.out.println("Los vecinos son: "+Tontah);
                      v = Tontah.size();// saco el tamaño de la lista
                      
                      if(ki>=v){
                          pila.remove(pila.peek());
                          
                          help1 = A.get(pila.peek());//saco de la pila el nodo
                      duracell = pila.peek();// aqui tengo el numero del nodo que saque de la pila
                      Tontah = help1.getVecino();// aqui saco la lista de nodos adyacentes
                      //System.out.println("El valor ultimo "+pila.peek());
                      //System.out.println("Los vecinos son: "+Tontah);
                      v = Tontah.size();// saco el tamaño de la lista
                      ki=0;
                          
                      }
                   
                          
                          Vec = Tontah.get(ki);
                          vec = Integer.parseInt(Vec);// tengo el valor entero del primer nodo adyacente
                        
                          
                     
                          help2 = A.get(vec);// aqui saco el nodo vecino obtenido
                          
                         
                          //System.out.println("El tamaño de la pila "+pila.size());
                          
                          
                          if(help2.getBool()==0){// pregunto si el nodo adyacente ya esta marcado
                              DFS tree = new DFS();
                              
                              tree.setEntra(duracell);//coloco el valor de entrada de la arista
                              tree.setSale(vec);//coloco el valor de salida
                              tree.setName(h);
                              
                              pila.addElement(vec);//meto el nodo adyacente a la pila
                              
                         
                              //System.out.println(tree.getEntra()+"--"+tree.getSale());
                              help2.setVisit(true);//marco al nodo adyacente como visitado
                              D.put(h, tree);// meto la arista al hash
                              
                              h= h+1;
                              help2.setBool(1);
                              ki = 0;
                           
                          }
                          else{
                           
                                    ki = ki+1;
                                  //System.out.println("no acepto "+duracell+" , "+vec);
                                  for(int lk=0; lk<v; lk++){
                                    hak = Tontah.get(lk);
                                    kj = Integer.parseInt(hak);
                              
                                    Nodos N = new Nodos();     
                                    N = A.get(kj);
                            
                                    fg = N.getBool();
          
                                    hh = hh*fg;
                                  }
                                  
                                      //System.out.println("hh vale"+hh);
                                                if(hh==1){
                                                    pila.remove(pila.peek());
                                                     ki = 0; 
                                                      //System.out.println("ahora la pila vale "+pila.peek());
                                                           }
                         
                                         
                              
                          }
                          
                        def = D.size(); 
                       if(def==mat-1){
                      pila.clear();
                  }   
                     
               
                  }
         
         //**************parte para imprimir
         DFS print = new DFS();
                  
                  try { 
                  
                  String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos\\DFSiter.gv";
                  File archivo12 = new File(ruta);
                  BufferedWriter bw1 = null;
                  bw1 = new BufferedWriter(new FileWriter(archivo12));
                  bw1.write("Graph G {");
                  bw1.newLine();
                  
                      System.out.println("hay vale "+h);
                      
                  for (int ji=0; ji<h; ji++) {
                      
                      print = D.get(ji);
                      
                      System.out.println(print.getEntra()+"--"+print.getSale());
                      bw1.write(print.getEntra()+"--"+print.getSale());
                      bw1.newLine();
                      bw1.flush();
                  }
                  
                  
                  
                  bw1.write("}");
                  
                  bw1.close();
                  
                  
                  
                  
              } catch (IOException ex) {
            Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
        }  */                       

           //******************************************************************************DIJSTRA
             /*     Nodos help = new Nodos();
           Nodos help3 = new Nodos();
               
                String NS;
                String NT;
                int ns;
                int nt;
                String Vec;
                int vec;
               String flecha;
               
               String crear;
               boolean Dijstra = false;
               double P;
               double suma = 0.0;
               double min;
             boolean IMPRIME = false;
             
             
              
                ArrayList<String> Tontita = new ArrayList<String>();
                
            
                double DB = fat+1;
                Aristas B1 = new Aristas();
         
                 NS = NodoS.getText(); //obtengo el valor del teclado lo mando a S.
                  System.out.println("El nodo de inicio es "+NS);
                  ns = Integer.parseInt(NS);//convierto el valor "NS" en entero.
                  
                  NT = NodoT.getText(); //obtengo el valor del teclado lo mando a S.
                  System.out.println("El nodo de final es "+NT);
                  nt = Integer.parseInt(NT);//convierto el valor "NT" en entero.
                  
                //System.out.println("fat es "+fat);
                   
                  
                  
                  Iterator Nodos = A.keySet().iterator();
                while(Nodos.hasNext()){
                    Object nextNodos = Nodos.next();
                    help = A.get(nextNodos);                    
                    
                  help3.setDijstra(fat+1);//Inicializo los nodos en infinito
                }
         
                HashMap<Double, Nodos> Order = new HashMap<>();  
                HashMap<Integer, Nodos> WAY = new HashMap<>();
                HashMap<Integer, Double> WAY2 = new HashMap<>();
                HashMap<String, Aristas> S = new HashMap<>();
                ArrayList<String> VerA = new ArrayList<String>();
                ArrayList<Integer> VerN = new ArrayList<Integer>();
                
                       
                 
                 Stack<Double> pila = new Stack<Double>();
                
                help = A.get(ns);
              VerN.add(ns);
           
                P = 0.0;
                  
                
            while (Dijstra ==false){
                    Tontita = help.getVecino();
                  //System.out.println("sus vecinos son  "+Tontita);
                  
                  
                      
                    for(int t=0;t<Tontita.size();t++){
                 
                          Vec = Tontita.get(t);
                          vec = Integer.parseInt(Vec);
                          
                          //System.out.println("el vecino entero"+vec);
                          flecha = help.getId()+"->"+vec;
                          
                          
                            if(VerA.contains(flecha)==false||VerN.contains(vec)==false)
                            {
                          //System.out.println("la flecha a buscar"+flecha);
                          B1 = B.get(flecha);   //Aqui obtengo la arista
                               
                           Nodos help1 = new Nodos();
                          help1 = A.get(vec);
                          suma = B1.getPeso()+P;
                          
                                 if(suma<help1.getDijstra())
                                {
                                help1.setDijstra((int)suma);//Aqui asigno el peso de la arista al nodo
                                }
                          
                          help1.setPadre(help.getId());
                          Order.put(suma, help1);//Para recuperar el nodo posteriormente
                          WAY2.put(help1.getId(), suma);//Este HASH ES PARA RECUPERAR EL VALOR DE DIJSTRA      
                          pila.add(suma);//para despuer ordenar los pesos
                          
                            }
                            
                    }//Salida del for
                    
                                      for(int u =0;u<pila.size();u++)
                                      {
                                      //System.out.println("es "+pila.get(u));
                                      DB = Math.min(DB,pila.get(u) );
                                  
                                      }
                                    
                                 //System.out.println("El valor minimo es "+DB);
                                 pila.remove(pila.indexOf(DB));
                  
                  Nodos PS = new Nodos();
                  
                  PS = Order.get(DB);
                  
                  crear = PS.getPadre()+"->"+PS.getId();
                  if(S.containsKey(crear)==false)
                  {
                  System.out.println(crear);
                  Aristas Pon = new Aristas();
                  Aristas Mira = new Aristas();
                  
                  Pon.setStart(PS.getPadre());
                  Pon.setEnd(PS.getId());
                  Mira = B.get(crear);
                  Pon.setPeso(Mira.getPeso());
                  
                  S.put(crear, Pon);//Aqui gusrdo aristas
                  PS.setDAD(PS.getPadre());//AQUI VOY METIENDO LOS PADRES
                  WAY.put(PS.getId(), PS);//Aqui guardo nodos
                  
                  VerA.add(crear);//Para verificar las aristas
                  VerN.add(PS.getId());//Para verificar los nodos que no se regrese
                  
                                if(PS.getId()==nt){
                                Dijstra = true;
                                    //System.out.println("No mames si llego");
                                    System.out.println("");
                                }
                                else{
                                help = A.get(PS.getId());
                                DB = fat +1;
                                P = suma;
                                
                                }
                  }
                  if(PS.getId()==nt){
                                Dijstra = true;
                                  
                                }
                                else{
                                help = A.get(PS.getId());
                                DB = fat +1;
                                
                                }
                  
                  
                  
            }//Salida del while
            
            //**************************************************PARA IMPRIMIR EL CAMINO MAS CORTO
            boolean imprime= false;
           
            
            ArrayList<Integer> VN = new ArrayList<Integer>();
            ArrayList<Integer> pt = new ArrayList<Integer>();
            
            
            Nodos PRO =new Nodos();
               
                boolean DAD = false;
                int b=0;
                double pes;
                double DJ=0.0;
                double OPV;
               
            Aristas Ayu = new Aristas();
            
             PRO = WAY.get(nt);
             
          
        
                  try{
                      String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\DIJSTRA.gv";
                      File archivo = new File(ruta);
                      BufferedWriter bw = null;
                      bw = new BufferedWriter(new FileWriter(archivo));
                      bw.write("digraph G {");
                      bw.newLine();
                    
                  while(imprime==false){
                    
                   pt = PRO.getDAD();
                    //System.out.println("Los padres son: "+pt);
                    
                while(DAD == false)
                {  
                
                
                        if(VN.contains(pt.get(b))==false)
                        {
                        
                        VN.add(PRO.getId());
                        DAD=true;
                        }
                        else
                        {
                        b=b+1;    
                        }
                
                }
                
               Ayu = B.get(pt.get(b)+"->"+PRO.getId());
              
                System.out.println(pt.get(b)+"->"+PRO.getId());
                bw.write(pt.get(b)+"->"+PRO.getId());
                Ayu = B.get(pt.get(b)+"->"+PRO.getId());
                OPV = Ayu.getPeso();
                DJ = DJ +OPV;
                bw.newLine();
                bw.flush();
                
                    bw.newLine();
                    bw.flush();
                    
                if(pt.get(b)==ns)
                    {
                      
                        imprime = true;
                    }
                    else
                    {
                    PRO = WAY.get(pt.get(b));
                    b=0;
                    }
            }
                 
                  System.out.println(ns+" [label=\""+0.0+"\"]; ");
                    bw.write(ns+" [label=\""+0.0+"\"]; ");
                    
                 
                    System.out.println(nt+" [label=\""+"nodo_"+nt+"("+DJ+")"+"\"]; ");
                    bw.write(nt+" [label=\""+"nodo_"+nt+"("+DJ+")"+"\"]; ");
                  
                  bw.write("}");
                      bw.close();
                      
                  } catch (IOException ex) {
                      Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
                  }*/
          
          //**********************************************************************************************KRUSKAL
                    int MAX = 0;
                    Stack<Integer> orden = new Stack<Integer>();
                    HashMap<String, Aristas> K = new HashMap<>();
                    String raya;
                    boolean Kruskal = false;
                    HashMap<Integer, Nodos> ListaN = new HashMap<>();
                    int cont = 1;
                    String cad;
                  String cad1;
                  boolean HACEDOR = true;
                  int CJ = 0; 
                  int CC;
                  String Vec; 
                  int vec;
                  int Peso;
                  
                  while(pilaf.empty()==false){
                    for(int o=0; o<pilaf.size();o++)
                  {
                  MAX = Math.max(MAX, pilaf.get(o));
                  }

           //System.out.println("max es "+MAX);
           orden.add(MAX);      //EN LA PILA orden se guardaran los valores en orden de los pesos
           pilaf.remove(pilaf.indexOf(MAX));
           MAX = 0;
                  } 
                  
                  //System.out.println("el primero es "+orden.peek());
                  
                  
                  
                  while(Kruskal == false)
                  {
                  Aristas saca = new Aristas();
                      //System.out.println("EL VALOR SIGUIENTE ES "+orden.peek());
                      Peso = orden.peek();
                  saca = BK.get(orden.pop());
                  
                  raya = saca.getStart()+"--"+saca.getEnd();
                      
                  if (ListaN.containsKey(saca.getStart())==true && ListaN.containsKey(saca.getEnd())==true)
                  {    
                  //************************************************INICIA PRUEBA
                     //System.out.println("PONDRA "+raya);
                 Nodos pru = new Nodos();
                 Nodos pru1 = new Nodos();
                 
                 pru = ListaN.get(saca.getStart());
                 pru1 = ListaN.get(saca.getEnd());
                      //System.out.println("LOS CJ "+pru.getConjunto()+" y "+pru1.getConjunto());
                      //System.out.println("");
                    if(pru.getConjunto()== pru1.getConjunto())
                    {
                     HACEDOR = false;
                        //System.out.println("SI PONGO ESTA ARISTA SE HARA UN CICLO");
                        //System.out.println(raya);
                    }
                    
                  //***********************************************FIN DE PRUEBA
                 }
                  
                  if(HACEDOR == true)
                  {
                 //System.out.println(raya);//AQUI SE IMPRIMEEEEEEE
                  
                  saca.setPeso(Peso);
                  K.put(raya, saca);
                  
                  Nodos sac = new Nodos();
                  Nodos sac1 = new Nodos();
                  
                  cad= Integer.toString(saca.getStart());
                  cad1= Integer.toString(saca.getEnd());
                  
                  if (ListaN.containsKey(saca.getStart())==true && ListaN.containsKey(saca.getEnd())==true)
                  {
                      //System.out.println("AQUI CAYO 1");
                   sac = ListaN.get(saca.getStart());
                   sac.setVecino(cad1);
                        CC = sac.getConjunto();
                        
                      sac1 = ListaN.get(saca.getEnd());
                        sac1.setVecino(cad);
                        int CM =sac1.getConjunto();
                        
                       //HAY QUE PONERLOS A TODOS LOS DEMAS
                       
                     
                      Nodos sac2 = new Nodos();
                      //System.out.println("el tamño es "+ListaN.size());
                      
                      
                      
                      Iterator aristas = ListaN.keySet().iterator();
                while(aristas.hasNext()){
                    Object nextNodos = aristas.next();
                    
                    sac2 = ListaN.get(nextNodos);//aqui tengo el objeto nodo
                     
                         
                            vec = sac2.getConjunto();
                            
                            //System.out.println("el nodo "+sac2.getId()+"tiene cj "+sac2.getConjunto());
                            if(vec==CM)
                            {
                            sac2.setConjunto(CC);//LE PONGO EL MISMO CONJUNTO A TODOS
                            //System.out.println("Al nodo "+sac2.getId()+" ponemos "+CC);
                            }
                            //System.out.println("que paso");
                      }
                   
                  }
                  
                  
                  
                  if (ListaN.containsKey(saca.getStart())==false && ListaN.containsKey(saca.getEnd())==false)//No hay ningun nodo en el arbol
                  {
                     // System.out.println("AQUI CAYO 2 ");
                  
                  sac.setId(saca.getStart());
                  sac.setConjunto(CJ);
                  sac.setVecino(cad1);
                  ListaN.put(saca.getStart(), sac);
                      //System.out.println("AL nodo "+saca.getStart()+" le ponemos "+CJ);
                  sac1.setId(saca.getEnd());
                  sac1.setConjunto(CJ);
                  sac1.setVecino(cad);
                  ListaN.put(saca.getEnd(), sac1);
                  
                  //System.out.println("AL nodo "+saca.getEnd()+" le ponemos "+CJ);
                  } 
                  
                  if (ListaN.containsKey(saca.getStart())==true && ListaN.containsKey(saca.getEnd())==false)
                  {
                  //System.out.println("AQUI CAYO 3");
                        sac = ListaN.get(saca.getStart());
                        sac.setVecino(cad1);
                        CC = sac.getConjunto();
                        
                        sac1.setId(saca.getEnd());
                        sac1.setConjunto(CC);
                        sac1.setVecino(cad);
                        ListaN.put(saca.getEnd(),sac1); 
                       // System.out.println("EL nodo "+saca.getEnd()+"ponemos cj "+CC);
                  }
                  
                  if(ListaN.containsKey(saca.getStart())==false && ListaN.containsKey(saca.getEnd())==true)
                  {
                      //System.out.println("AQUI CAYO 4");
                  sac = ListaN.get(saca.getEnd());
                  sac.setVecino(cad1);
                        CC = sac.getConjunto();
                        
                        sac1.setId(saca.getStart());
                        sac1.setConjunto(CC);
                        sac1.setVecino(cad);
                        ListaN.put(saca.getStart(),sac1); 
                //System.out.println("EL nodo "+saca.getStart()+"ponemos cj "+CC);
                  }
                  
                  
                        if(K.size()==A.size()-1)
                        {
                         Kruskal = true;   
                        }
                        
                
                  CJ = CJ +1;
                  }
                  else
                  {
                    HACEDOR = true;  
                  }
                  
                  }//fin del while
              
                  int MSTK = 0;
                  
                  System.out.println("AQUI EMPIEZA A IMPRIMIR KRUSKAL");
                  
                  try {
                      String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\AEM\\KRUSKAL.gv";
                      File archivo = new File(ruta);
                      BufferedWriter bw = null;
                      bw = new BufferedWriter(new FileWriter(archivo));
                      bw.write("Graph G {");
                      bw.newLine();
                  
                  
                   
                   Aristas AyI = new Aristas();
                 
                  
                  Iterator aristas = K.keySet().iterator();
                while(aristas.hasNext()){
                    Object nextArista = aristas.next();
                    AyI = K.get(nextArista);
                    
                    
                    
                   MSTK = MSTK +AyI.getPeso();
                    //System.out.println(AyI.getStart()+"--"+AyI.getEnd());
                    bw.write(AyI.getStart()+"--"+AyI.getEnd()+" [label=\""+AyI.getPeso()+"\"]; ");
                    bw.newLine();
                    bw.flush();
                  
                }
                  System.out.println("EL PESO TOTAL MST KRUSKAL = "+MSTK);
                  System.out.println("");
                  bw.write("}");
                      bw.close();
                      
                  } catch (IOException ex) {
                      Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
                  }
                  
                 
                  
       //******************************************************************************************************PRIM
         /* 
            String NS;
             int ns;
             boolean  Prim = false;
             boolean VALOR = false;
             String Vecz;
             int vecz;
             String flecha;
             String flechaI;
            
             String crear;
             String crearI;
             
              Stack<Integer> pilaPRIM = new Stack<Integer>();
                
              HashMap<Integer, Aristas> S = new HashMap<>();
              HashMap<String, Aristas> PRIM = new HashMap<>();
              HashMap<String, Aristas> PRIMf = new HashMap<>();
               
            
              ArrayList<Integer> RN = new ArrayList<Integer>();
                int DB = fat+1;
               
         
                 NS = NodoS.getText(); //obtengo el valor del teclado lo mando a S.
                  //System.out.println("El nodo de inicio es "+NS);
                  ns = Integer.parseInt(NS);//convierto el valor "NS" en entero.
                  
                //System.out.println("fat es "+fat);
                   Nodos help = new Nodos();
                   Nodos help3 = new Nodos();
                  
                  
                  Iterator Nodos1 = A.keySet().iterator();
                while(Nodos1.hasNext()){
                    Object nextNodos = Nodos1.next();
                    help = A.get(nextNodos);                    
                    
                  help3.setDijstra(fat+1);//Inicializo los nodos en infinito
                }
         
            Nodos help2 = new Nodos();
                
            help2 = A.get(ns);
                
            
                while (Prim ==false){
                    ArrayList<String> Tontita = new ArrayList<String>();
                    Tontita = help2.getVecino();
                  //System.out.println("sus vecinos son  "+Tontita);
                      //System.out.println("EL NODO ES "+help2.getId());
                    for(int t=0;t<Tontita.size();t++){
                 
                          Vecz = Tontita.get(t);
                          vecz = Integer.parseInt(Vecz);
                          
                          //System.out.println("el vecino entero "+vecz);
                          
                          flecha = help2.getId()+"--"+vecz;
                          flechaI = vecz+"--"+help2.getId();
                          
                          //System.out.println("la flecha a buscar "+flecha);  
                          
                            if(PRIMf.containsKey(flecha)==false && PRIMf.containsKey(flechaI)== false)
                            {
                                
                            if (B.containsKey(flecha)==false)
                                {
                                flecha = vecz+"--"+help2.getId();
                                }
                              
                          //System.out.println("considera la flecha "+flecha); 
                           Aristas Bz = new Aristas();
                          Bz = B.get(flecha);   //Aqui obtengo la arista
                                //System.out.println("LA ARISTA ES "+Bz);
                           Nodos help1 = new Nodos();
                          help1 = A.get(vecz);
                                
                                 if(RN.contains(vecz)== true)
                   {
                       Nodos hep1 = new Nodos();
                       hep1 = A.get(vecz);
                       if(DB < hep1.getDijstra())
                       {
                        
                        String cre;
                        cre = hep1.getPadre()+"--"+hep1.getId();
                        PRIM.remove(cre);
                       }
                   }
                                 
                                help1.setDijstra(Bz.getPeso());//Aqui asigno el peso de la arista al nodo
                           
                          pilaPRIM.add(help1.getDijstra());//para despuer ordenar los pesos
                            
                          Aristas Bb = new Aristas();
                          
                          Bb.setStart(help2.getId());
                          Bb.setEnd(vecz);
                          Bb.setPeso(Bz.getPeso());
                          S.put(help1.getDijstra(), Bb);//GUARDO PESO Y ARISTA
                            
                            
                            }
                            else
                            {
                                //System.out.println("AQUI ESTOY");
                            }
                            
                    }//Salida del for
                    
                    for(int u =0;u<pilaPRIM.size();u++)
                                      {
                                      //System.out.println("LA PILA "+pilaPRIM.get(u));
                                      DB = Math.min(DB,pilaPRIM.get(u) );
                                  
                                      }
                    
                    //System.out.println("EL VALOR MINIMO "+DB);
                    pilaPRIM.remove(pilaPRIM.indexOf(DB));//LO QUITO DE LA PILA
                    
                    Aristas BN = new Aristas();
                    BN = S.get(DB);//RECUPERO LA ARISTA MINIMA
                    
                    crear = BN.getStart()+"--"+BN.getEnd();
                    crearI = BN.getEnd()+"--"+BN.getStart();
                    //System.out.println("crear es "+crear);
                    
                    
                   
                   Nodos hep = new Nodos();
                   hep = A.get(BN.getEnd());
                   hep.setPadre(BN.getStart()); 
                    
          if(RN.contains(BN.getStart())== true && RN.contains(BN.getEnd())== true)
              
          {
                VALOR = true; 
                //System.out.println("LA ARISTA RECHAZADA "+crear);
                PRIMf.put(crear, BN);
          }
            
                 if(VALOR == false)
                 {
                    BN.setPeso(DB);
                    PRIM.put(crear, BN);
                    PRIMf.put(crear, BN);
                    
                    //System.out.println(crear);//AQUI IMPRIMO EN PANTALLA*************************
                    
                    if(RN.contains(BN.getStart())==false)
                    {
                    RN.add(BN.getStart());
                    }
                    
                    if(RN.contains(BN.getEnd())==false)
                    {
                    RN.add(BN.getEnd());
                    }
                    
                 }
                    
                    //System.out.println("el tamaño es "+PRIM.size());
                    if(RN.size()==A.size())
                    {
                    Prim = true;
                    }
                    else
                    {
                        
                        
                        help2 = A.get(BN.getEnd());
                        
                        
                        DB = fat+1;
                        
                        VALOR = false;
                    }
                    
                    
                    
                    
                }//fin de PRIM
              
                
                
                int MSTP = 0;
                
            System.out.println("AQUI EMPIEZA A IMPRIMIR PRIM");
                  
             
           try {
                      String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\AEM\\PRIM.gv";
                      File archivo = new File(ruta);
                      BufferedWriter bw = null;
                      bw = new BufferedWriter(new FileWriter(archivo));
                      bw.write("Graph G {");
                      bw.newLine();
            
            
                Aristas AO = new Aristas();
              
                  
                  Iterator aristas = PRIM.keySet().iterator();
                while(aristas.hasNext()){
                    Object nextArista = aristas.next();
                    AO = PRIM.get(nextArista);
                    
                    
                    MSTP = MSTP + AO.getPeso();
                    //System.out.println(AO.getStart()+"--"+AO.getEnd());
                    bw.write(AO.getStart()+"--"+AO.getEnd()+" [label=\""+AO.getPeso()+"\"]; ");
                    bw.newLine();
                    bw.flush();
                    
                }
                System.out.println("EL PESO TOTAL MST PRIM = "+MSTP);
                System.out.println("");  
                
               bw.write("}");
                      bw.close();
                      
                  } catch (IOException ex) {
                      Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
                  }
                  
      */
    }//GEN-LAST:event_GILBERTActionPerformed

    private void GEOGRAFICOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GEOGRAFICOActionPerformed
        // TODO add your handling code here:
        
        String n;
            int x;
            int t1;
            int s1;
            double p1;
            double p2;
            double q1;
            double q2;
            double r;
            int a=0;
            int mat;
            String Contiene = null;
            String Ini = null;
            String Fin = null;
            int fat =0;
            int gordo;
            
            
            n = EntraNodos.getText(); //obtengo el valor del teclado lo mando a n.
            System.out.println("n = "+n);
           
            x = Integer.parseInt(n);//convierto el valor "n" en entero.
            mat = x;
        HashMap<Integer, Nodos> A = new HashMap<>();
        HashMap<String, Aristas> B = new HashMap<>();
        HashMap<Integer, Aristas> BK = new HashMap<>();
        HashMap<Integer, Aristas> BKI = new HashMap<>();
        
            ArrayList<Integer> OkGordo = new ArrayList<Integer>(); 
            
            Stack <Integer> pilaf = new Stack<Integer>();
            Stack <Integer> pilak = new Stack<Integer>();
            
   for(int i=0; i<x; i++){   //Aqui creo x numero de objetos nodos. 
           
        Random t = new Random();    //Creo un random
                t1 = (int)(t.nextDouble() *11);      //hago entero el random lo limito.
                
        Random s = new Random();    //Creo un random
                s1 = (int)(s.nextDouble() *11);      //hago entero el random lo limito.
            //System.out.println(t1+" "+s1);
        Nodos cosa = new Nodos();
                cosa.setId(i);//Utilizo los randoms para crear x y y coordenadas.
                cosa.setX(t1);
                cosa.setY(s1);
                
                A.put(i, cosa);
            }
   
            Nodos prueba1 = new Nodos();//Nadamas para guardar.
            Nodos prueba2 = new Nodos();    
   
    for(int j=0; j<x; j++){   //Aqui empiezo a iterar los nodos.
        
        prueba1=A.get(j);
        
        for(int k=0; k<x; k++){//Nodos iterando con nodos.
         
        prueba2=A.get(k);
        
        p1= prueba1.getX();
        p1= p1/10;          //Este es X1
        q1= prueba1.getY();
        q1=q1/10;           //Este es Y1
        
        p2= prueba2.getX();
        p2= p2/10;          //Este es X2
        q2= prueba2.getY();
        q2= q2/10;          //Este es Y2
        
       double help1= Math.pow((p2-p1), 2);
       double help2= Math.pow((q2-q1), 2);
        
        r = Math.sqrt(help1 + help2);//La formula muy rebuscada para ir viendo que me salia.
        
                String cadena1;
                String cadena2;
                cadena1 = Integer.toString(prueba2.getId());
                cadena2 = Integer.toString(prueba1.getId());
                
                ArrayList Tonta1;
                ArrayList Tonta2;//El relajo para poner abajo los nodos adyacentes.
                
                Tonta1=prueba1.getVecino();
                Tonta2=prueba2.getVecino();
        
           //System.out.println(r);
        if(r<=0.25 && j!=k){
            
            
                //Este if (un poco rebuscado), se asegura que no se repitan aristas.
                //Pregunta en la lista de Vecinos de los nodos para que no se repitan.
                 Ini = String.valueOf(prueba1.getId());
                Fin = String.valueOf(prueba2.getId());
                Contiene = Ini+"--"+Fin;
                //Tonta1.contains(cadena2)|| Tonta2.contains(cadena1)||Tonta1.contains(cadena1) ||Tonta2.contains(cadena2)
                
                
            if(B.containsKey(Contiene)==false && B.containsKey(Fin+"--"+Ini)== false)
                {
                 Aristas cosita = new Aristas();//Construyo las aristas.
                
                cosita.setStart(prueba1.getId());
                cosita.setEnd(prueba2.getId());
                cosita.setName(a);
                    //System.out.println(Contiene);
                
                a= a+1;
                
                Random vo = new Random();    //Creo un random
                        gordo = (int)(vo.nextDouble() *100000);
                       
                        while (OkGordo.contains(gordo)==true)//PARA EVITAR QUE SE REPITAN LOS PESOS
                        {
                        Random v2 = new Random();    //Creo un random
                        gordo = (int)(v2.nextDouble() *100000);
                            
                        }
                        
                          //System.out.println("el peso es "+gordo);
                        //cosita.setValor(Ini+"--"+Fin);
                        OkGordo.add(gordo);
                          cosita.setPeso(gordo);//AQUI ASIGNO EL PESO A LAS ARISTAS
                         fat = fat + gordo;
                        
                        //Contiene2 = Fin+"--"+Ini;
                       
                          
                          
                          
                          B.put(Contiene, cosita);
                          BK.put(gordo, cosita);//para KRUSKAL
                          BKI.put(gordo, cosita);//PARA kruskal inverso
                          pilaf.add(gordo);//para KRUSKAL
                          pilak.add(gordo);//PARA kruskal inverso
                
                
                
                
                prueba1.setVecino(cadena1);//Pongo a los nodos sus nodos adyacentes.
                prueba2.setVecino(cadena2);
                }
                else
                {
        
                }
         }
       
        }
        
    }
    
    
    /*Aristas Ayuda = new Aristas();
    Iterator aristas = B.keySet().iterator();
                while(aristas.hasNext()){
                    Object nextArista = aristas.next();
                    Ayuda = B.get(nextArista);                    
                    //System.out.println(Ayuda.getStart()+"->"+Ayuda.getEnd()+" [label=\""+Ayuda.getPeso()+"\"]; ");
                   
                }*/
        
    Aristas Ayuda = new Aristas();

                  try{
                      String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos PARA DIJSTRA\\DD\\GEOGRAFICO.gv";
                      File archivo = new File(ruta);
                      BufferedWriter bw = null;
                      bw = new BufferedWriter(new FileWriter(archivo));
                      bw.write("graph G {");
                      bw.newLine();
                  
                  
                  Iterator aristas5 = B.keySet().iterator();
                while(aristas5.hasNext()){
                    Object nextArista = aristas5.next();
                    Ayuda = B.get(nextArista);                    
                    //System.out.println(Ayuda.getStart()+"--"+Ayuda.getEnd()+" [label=\""+Ayuda.getPeso()+"\"]; ");
                    bw.write(Ayuda.getStart()+"--"+Ayuda.getEnd()+" [label=\""+Ayuda.getPeso()+"\"]; ");
                    bw.newLine();
                    bw.flush();
                  
                }
                  
                  bw.write("}");
                      bw.close();
                      
                  } catch (IOException ex) {
                      Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
                  }
             
    
    /*Aristas imprime = new Aristas();
            
              try {
            String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos\\GEOGRAFICO.gv";
            File archivo = new File(ruta);
            BufferedWriter bw = null;
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write("Graph G {");
            bw.newLine();
            
            
             for (int l=0; l<a; l++) {
              
                    imprime = B.get(l);
                    bw.write(imprime.getStart()+"--"+imprime.getEnd());
                    bw.newLine();
                    bw.flush();
                    
                     System.out.println(imprime.getStart()+"--"+imprime.getEnd()+" [label=\""+imprime.getName()+"\"]; ");
            } 
             bw.write("}");
              bw.close();
            
                 } catch (IOException ex) {
            Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
        } */

              //**********************************************************************BFS
              /*Nodos help = new Nodos();
                  Nodos help1 = new Nodos();
                  Nodos help2 = new Nodos();
                  String S;
                  int s;
                  int tail;
                  int v;
                  String Vec;
                  int vec;
                  int h =0;
                  
                  S = SOURCE.getText(); //obtengo el valor del teclado lo mando a S.
                  System.out.println("El nodo raiz es "+S);
                  s = Integer.parseInt(S);//convierto el valor "S" en entero.
                  
                  
                  for(int i=0; i<mat; i++){
                      help = A.get(i);
                      
                      help.setVisit(false); // Inicializo todos los nodos en falso
                  }
                  
                  Queue<Integer> cola = new LinkedList();// Defino la cola
                  ArrayList<String> Tonta = new ArrayList<String>();
                  HashMap<Integer, ARBOL_BFS> C = new HashMap<>();
                  
                  
                  
                  tail = s;
                  help1 = A.get(s);
                  cola.add(tail);
                  
                  
                  while(cola.peek()!= null){
                      
                      // System.out.println("El nodo es "+help1.getId());
                      help1 = A.get(cola.peek());
                      tail = cola.peek();
                      Tonta = help1.getVecino();
                      //System.out.println("Los hijos son: "+Tonta);
                      v = Tonta.size();
                      
                      for(int i=0; i<v; i++){
                          ARBOL_BFS tree = new ARBOL_BFS();
                          Vec = Tonta.get(i);
                          vec = Integer.parseInt(Vec);
                          help2 = A.get(vec);
                          
                          //System.out.println("El valor padre "+help1.getVisit());
                          //System.out.println("El valor hijo "+help2.getVisit());
                          if(help2.getVisit()== false){
                              
                              tree.setEntra(tail);
                              tree.setSale(vec);
                              tree.setName(h);
                              
                              cola.add(vec);
                              C.put(h, tree);
                              //System.out.println(tree.getEntra()+"--"+tree.getSale());
                              help2.setVisit(true);
                              h = h+1;
                          }
                          else{
                              
                          }
                          
                      }
                      
                      help1.setVisit(true);
                      cola.remove(tail);
                  }
                  
                  //System.out.println("h vale " +h);
                  int hay;
                  hay = h;
                  
                  ARBOL_BFS print = new ARBOL_BFS();
                  
                  try { 
                  
                  String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos\\BFS.gv";
                  File archivo1 = new File(ruta);
                  BufferedWriter bw1 = null;
                  bw1 = new BufferedWriter(new FileWriter(archivo1));
                  bw1.write("Graph G {");
                  bw1.newLine();
                  
                      System.out.println("hay vale "+hay);
                      
                  for (int ji=0; ji<hay; ji++) {
                      
                      print = C.get(ji);
                      
                      System.out.println(print.getEntra()+"--"+print.getSale());
                      bw1.write(print.getEntra()+"--"+print.getSale());
                      bw1.newLine();
                      bw1.flush();
                  }
                  
                  
                  
                  bw1.write("}");
                  
                  bw1.close();
                  
                  
                  
                  
              } catch (IOException ex) {
            Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
              }*/
              //*****************************************************************************DFS
              /*String s;
                    int SDFS;
                    Nodos help = new Nodos();
                    Nodos help1 = new Nodos();
                    Nodos help2 = new Nodos();
                    int v;
                    String Vec;
                    int vec;
                    int Deep;
                 

                    s = SourceDFS.getText(); //obtengo el valor del teclado lo mando a S.
                  System.out.println("El nodo raiz es "+s);
                  SDFS = Integer.parseInt(s);//convierto el valor "S" en entero.
                  
                  
                  for(int i=0; i<mat; i++){
                      help = A.get(i);
                      
                      help.setVisit(false); // Inicializo todos los nodos en falso
                  }
                  Deep = SDFS; 
                 System.out.println("estoy mandando "+Deep);
                  ARBOL_DFS cos = new ARBOL_DFS();
                  
                  help1 = A.get(Deep);
                 HashMap<Integer, Aristas> HashD = new HashMap<>();
                  cos.setDFS(help1,A,HashD);
                 
                 
                
                HashD = cos.getDFS();
                System.out.println("el tamaño es "+HashD.size());
                Aristas ji = new Aristas();
              
                
                try { 
                  
                  String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos\\DFS.gv";
                  File archivo3 = new File(ruta);
                  BufferedWriter bw2 = null;
                  bw2 = new BufferedWriter(new FileWriter(archivo3));
                  bw2.write("Graph G {");
                  bw2.newLine();

                Iterator aristas = HashD.keySet().iterator();
                while(aristas.hasNext()){
                    Object nextArista = aristas.next();
                    ji = HashD.get(nextArista);                    
                    System.out.println(ji.getStart()+"--"+ji.getEnd());
                     bw2.write(ji.getStart()+"--"+ji.getEnd());
                      bw2.newLine();
                      bw2.flush();
                }
                 bw2.write("}");
                  
                  bw2.close();
                  
                  
              } catch (IOException ex) {
            Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
        }*/
          //************************************************************************DFS ITERATIVO
         /* Nodos help = new Nodos();
                  Nodos help1 = new Nodos();
                  Nodos help2 = new Nodos();
                  String S;
                  int s;
                  int duracell;
                  int v;
                  String Vec;
                  int vec;
                  int h =0;
                  int ki = 0;
                  HashMap<Integer, DFS> D = new HashMap<>();
                  S = SourceDFS.getText(); //obtengo el valor del teclado lo mando a S.
                  System.out.println("El nodo raiz es "+S);
                  s = Integer.parseInt(S);//convierto el valor "S" en entero.
                  
                  
                  for(int j=0; j<mat; j++){
                      help = A.get(j);
                      
                      help.setBool(0); // Inicializo todos los nodos en falso
                  }
                  
                    Stack<Integer> pila = new Stack<Integer>();  // Defino la pila
                  ArrayList<String> Tontah = new ArrayList<String>();
                  String hak;
                  int kj;
                  int hh = 1;
                  int fg;
                int def;
                
                  
                  
                  duracell = s;
                  help1 = A.get(s);
                  pila.addElement(duracell);
                  help1.setBool(1);// marco el nodo como visitado
                  
                  
                  while(pila.empty()==false){
                      
                      //System.out.println("El nodo es "+help1.getId());
                      help1 = A.get(pila.peek());//saco de la pila el nodo
                      duracell = pila.peek();// aqui tengo el numero del nodo que saque de la pila
                      Tontah = help1.getVecino();// aqui saco la lista de nodos adyacentes
                      //System.out.println("El valor ultimo "+pila.peek());
                      //System.out.println("Los vecinos son: "+Tontah);
                      v = Tontah.size();// saco el tamaño de la lista
                      
                      if(ki>=v){
                          pila.remove(pila.peek());
                          
                          help1 = A.get(pila.peek());//saco de la pila el nodo
                      duracell = pila.peek();// aqui tengo el numero del nodo que saque de la pila
                      Tontah = help1.getVecino();// aqui saco la lista de nodos adyacentes
                      //System.out.println("El valor ultimo "+pila.peek());
                      //System.out.println("Los vecinos son: "+Tontah);
                      v = Tontah.size();// saco el tamaño de la lista
                      ki=0;
                          
                      }
                   
                          
                          Vec = Tontah.get(ki);
                          vec = Integer.parseInt(Vec);// tengo el valor entero del primer nodo adyacente
                        
                          
                     
                          help2 = A.get(vec);// aqui saco el nodo vecino obtenido
                          
                         
                          //System.out.println("El tamaño de la pila "+pila.size());
                          
                          
                          if(help2.getBool()==0){// pregunto si el nodo adyacente ya esta marcado
                              DFS tree = new DFS();
                              
                              tree.setEntra(duracell);//coloco el valor de entrada de la arista
                              tree.setSale(vec);//coloco el valor de salida
                              tree.setName(h);
                              
                              pila.addElement(vec);//meto el nodo adyacente a la pila
                              
                         
                              //System.out.println(tree.getEntra()+"--"+tree.getSale());
                              help2.setVisit(true);//marco al nodo adyacente como visitado
                              D.put(h, tree);// meto la arista al hash
                              
                              h= h+1;
                              help2.setBool(1);
                              ki = 0;
                           
                          }
                          else{
                           
                                    ki = ki+1;
                                  //System.out.println("no acepto "+duracell+" , "+vec);
                                  for(int lk=0; lk<v; lk++){
                                    hak = Tontah.get(lk);
                                    kj = Integer.parseInt(hak);
                              
                                    Nodos N = new Nodos();     
                                    N = A.get(kj);
                            
                                    fg = N.getBool();
          
                                    hh = hh*fg;
                                  }
                                  
                                      //System.out.println("hh vale"+hh);
                                                if(hh==1){
                                                    pila.remove(pila.peek());
                                                     ki = 0; 
                                                      //System.out.println("ahora la pila vale "+pila.peek());
                                                           }
                         
                                         
                              
                          }
                          
                        def = D.size(); 
                       if(def==mat-1){
                      pila.clear();
                  }   
                     
               
                  }
         
         //**************parte para imprimir
         DFS print = new DFS();
                  
                  try { 
                  
                  String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos\\DFSiter.gv";
                  File archivo12 = new File(ruta);
                  BufferedWriter bw1 = null;
                  bw1 = new BufferedWriter(new FileWriter(archivo12));
                  bw1.write("Graph G {");
                  bw1.newLine();
                  
                      System.out.println("hay vale "+h);
                      
                  for (int ji=0; ji<h; ji++) {
                      
                      print = D.get(ji);
                      
                      System.out.println(print.getEntra()+"--"+print.getSale());
                      bw1.write(print.getEntra()+"--"+print.getSale());
                      bw1.newLine();
                      bw1.flush();
                  }
                  
                  
                  
                  bw1.write("}");
                  
                  bw1.close();
                  
                  
                  
                  
              } catch (IOException ex) {
            Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
        }*/
          //**********************************************************************************DIJSTRA
              /*  Nodos help = new Nodos();
           Nodos help3 = new Nodos();
               
                String NS;
                String NT;
                int ns;
                int nt;
                String Vec;
                int vec;
               String flecha;
               
               String crear;
               boolean Dijstra = false;
               double P;
               double suma = 0.0;
               double min;
             boolean IMPRIME = false;
             
             
              
                ArrayList<String> Tontita = new ArrayList<String>();
                
            
                double DB = fat+1;
                Aristas B1 = new Aristas();
         
                 NS = NodoS.getText(); //obtengo el valor del teclado lo mando a S.
                  System.out.println("El nodo de inicio es "+NS);
                  ns = Integer.parseInt(NS);//convierto el valor "NS" en entero.
                  
                  NT = NodoT.getText(); //obtengo el valor del teclado lo mando a S.
                  System.out.println("El nodo de final es "+NT);
                  nt = Integer.parseInt(NT);//convierto el valor "NT" en entero.
                  
                //System.out.println("fat es "+fat);
                   
                  
                  
                  Iterator Nodos = A.keySet().iterator();
                while(Nodos.hasNext()){
                    Object nextNodos = Nodos.next();
                    help = A.get(nextNodos);                    
                    
                  help3.setDijstra(fat+1);//Inicializo los nodos en infinito
                }
         
                HashMap<Double, Nodos> Order = new HashMap<>();  
                HashMap<Integer, Nodos> WAY = new HashMap<>();
                HashMap<Integer, Double> WAY2 = new HashMap<>();
                HashMap<String, Aristas> S = new HashMap<>();
                ArrayList<String> VerA = new ArrayList<String>();
                ArrayList<Integer> VerN = new ArrayList<Integer>();
                
                       
                 
                 Stack<Double> pila = new Stack<Double>();
                
                help = A.get(ns);
              VerN.add(ns);
           
                P = 0.0;
                  
                
            while (Dijstra ==false){
                    Tontita = help.getVecino();
                  //System.out.println("sus vecinos son  "+Tontita);
                  
                  
                      
                    for(int t=0;t<Tontita.size();t++){
                 
                          Vec = Tontita.get(t);
                          vec = Integer.parseInt(Vec);
                          
                          //System.out.println("el vecino entero"+vec);
                          flecha = help.getId()+"->"+vec;
                          
                          
                            if(VerA.contains(flecha)==false||VerN.contains(vec)==false)
                            {
                          //System.out.println("la flecha a buscar"+flecha);
                          B1 = B.get(flecha);   //Aqui obtengo la arista
                               
                           Nodos help1 = new Nodos();
                          help1 = A.get(vec);
                          suma = B1.getPeso()+P;
                          
                                 if(suma<help1.getDijstra())
                                {
                                help1.setDijstra(suma);//Aqui asigno el peso de la arista al nodo
                                }
                          
                          help1.setPadre(help.getId());
                          Order.put(suma, help1);//Para recuperar el nodo posteriormente
                          WAY2.put(help1.getId(), suma);//Este HASH ES PARA RECUPERAR EL VALOR DE DIJSTRA      
                          pila.add(suma);//para despuer ordenar los pesos
                          
                            }
                            
                    }//Salida del for
                    
                                      for(int u =0;u<pila.size();u++)
                                      {
                                      //System.out.println("es "+pila.get(u));
                                      DB = Math.min(DB,pila.get(u) );
                                  
                                      }
                                    
                                 //System.out.println("El valor minimo es "+DB);
                                 pila.remove(pila.indexOf(DB));
                  
                  Nodos PS = new Nodos();
                  
                  PS = Order.get(DB);
                  
                  crear = PS.getPadre()+"->"+PS.getId();
                  if(S.containsKey(crear)==false)
                  {
                  System.out.println(crear);
                  Aristas Pon = new Aristas();
                  Aristas Mira = new Aristas();
                  
                  Pon.setStart(PS.getPadre());
                  Pon.setEnd(PS.getId());
                  Mira = B.get(crear);
                  Pon.setPeso(Mira.getPeso());
                  
                  S.put(crear, Pon);//Aqui gusrdo aristas
                  PS.setDAD(PS.getPadre());//AQUI VOY METIENDO LOS PADRES
                  WAY.put(PS.getId(), PS);//Aqui guardo nodos
                  
                  VerA.add(crear);//Para verificar las aristas
                  VerN.add(PS.getId());//Para verificar los nodos que no se regrese
                  
                                if(PS.getId()==nt){
                                Dijstra = true;
                                    //System.out.println("No mames si llego");
                                    System.out.println("");
                                }
                                else{
                                help = A.get(PS.getId());
                                DB = fat +1;
                                P = suma;
                                
                                }
                  }
                  if(PS.getId()==nt){
                                Dijstra = true;
                                    System.out.println("No mames, si llego!!!!");
                                    System.out.println("");
                                }
                                else{
                                help = A.get(PS.getId());
                                DB = fat +1;
                                
                                }
                  
                  
                  
            }//Salida del while
            
            //**************************************************PARA IMPRIMIR EL CAMINO MAS CORTO
            boolean imprime= false;
           
            
            ArrayList<Integer> VN = new ArrayList<Integer>();
            ArrayList<Integer> pt = new ArrayList<Integer>();
            
            
            Nodos PRO =new Nodos();
               
                boolean DAD = false;
                int b=0;
                double pes;
                double DJ=0.0;
                double OPV;
               
            Aristas Ayu = new Aristas();
            
             PRO = WAY.get(nt);
             
          
        
                  try{
                      String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\DIJSTRA.gv";
                      File archivo = new File(ruta);
                      BufferedWriter bw = null;
                      bw = new BufferedWriter(new FileWriter(archivo));
                      bw.write("digraph G {");
                      bw.newLine();
                    
                  while(imprime==false){
                    
                   pt = PRO.getDAD();
                    //System.out.println("Los padres son: "+pt);
                    
                while(DAD == false)
                {  
                
                
                        if(VN.contains(pt.get(b))==false)
                        {
                        
                        VN.add(PRO.getId());
                        DAD=true;
                        }
                        else
                        {
                        b=b+1;    
                        }
                
                }
                
               Ayu = B.get(pt.get(b)+"->"+PRO.getId());
              
                System.out.println(pt.get(b)+"->"+PRO.getId());
                bw.write(pt.get(b)+"->"+PRO.getId());
                Ayu = B.get(pt.get(b)+"->"+PRO.getId());
                OPV = Ayu.getPeso();
                DJ = DJ +OPV;
                bw.newLine();
                bw.flush();
                
                    bw.newLine();
                    bw.flush();
                    
                if(pt.get(b)==ns)
                    {
                      
                        imprime = true;
                    }
                    else
                    {
                    PRO = WAY.get(pt.get(b));
                    b=0;
                    }
            }
                 
                  System.out.println(ns+" [label=\""+0.0+"\"]; ");
                    bw.write(ns+" [label=\""+0.0+"\"]; ");
                    
                 
                    System.out.println(nt+" [label=\""+"nodo_"+nt+"("+DJ+")"+"\"]; ");
                    bw.write(nt+" [label=\""+"nodo_"+nt+"("+DJ+")"+"\"]; ");
                  
                  bw.write("}");
                      bw.close();
                      
                  } catch (IOException ex) {
                      Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
                  }*/
            
                //**********************************************************************************************KRUSKAL
                    int MAX = 0;
                    Stack<Integer> orden = new Stack<Integer>();
                    HashMap<String, Aristas> K = new HashMap<>();
                    String raya;
                    boolean Kruskal = false;
                    HashMap<Integer, Nodos> ListaN = new HashMap<>();
                    int cont = 1;
                    String cad;
                  String cad1;
                  boolean HACEDOR = true;
                  int CJ = 0; 
                  int CC;
                  String Vec; 
                  int vec;
                  int Peso;
                  
                  while(pilaf.empty()==false){
                    for(int o=0; o<pilaf.size();o++)
                  {
                  MAX = Math.max(MAX, pilaf.get(o));
                  }

           //System.out.println("max es "+MAX);
           orden.add(MAX);      //EN LA PILA orden se guardaran los valores en orden de los pesos
           pilaf.remove(pilaf.indexOf(MAX));
           MAX = 0;
                  } 
                  
                  //System.out.println("el primero es "+orden.peek());
                  
                  
                  
                  while(Kruskal == false)
                  {
                  Aristas saca = new Aristas();
                      //System.out.println("EL VALOR SIGUIENTE ES "+orden.peek());
                      Peso = orden.peek();
                  saca = BK.get(orden.pop());
                  
                  raya = saca.getStart()+"--"+saca.getEnd();
                      
                  if (ListaN.containsKey(saca.getStart())==true && ListaN.containsKey(saca.getEnd())==true)
                  {    
                  //************************************************INICIA PRUEBA
                     //System.out.println("PONDRA "+raya);
                 Nodos pru = new Nodos();
                 Nodos pru1 = new Nodos();
                 
                 pru = ListaN.get(saca.getStart());
                 pru1 = ListaN.get(saca.getEnd());
                      //System.out.println("LOS CJ "+pru.getConjunto()+" y "+pru1.getConjunto());
                      //System.out.println("");
                    if(pru.getConjunto()== pru1.getConjunto())
                    {
                     HACEDOR = false;
                        //System.out.println("SI PONGO ESTA ARISTA SE HARA UN CICLO");
                        //System.out.println(raya);
                    }
                    
                  //***********************************************FIN DE PRUEBA
                 }
                  
                  if(HACEDOR == true)
                  {
                 //System.out.println(raya);//AQUI SE IMPRIMEEEEEEE
                  
                  saca.setPeso(Peso);
                  K.put(raya, saca);
                  
                  Nodos sac = new Nodos();
                  Nodos sac1 = new Nodos();
                  
                  cad= Integer.toString(saca.getStart());
                  cad1= Integer.toString(saca.getEnd());
                  
                  if (ListaN.containsKey(saca.getStart())==true && ListaN.containsKey(saca.getEnd())==true)
                  {
                      //System.out.println("AQUI CAYO 1");
                   sac = ListaN.get(saca.getStart());
                   sac.setVecino(cad1);
                        CC = sac.getConjunto();
                        
                      sac1 = ListaN.get(saca.getEnd());
                        sac1.setVecino(cad);
                        int CM =sac1.getConjunto();
                        
                       //HAY QUE PONERLOS A TODOS LOS DEMAS
                       
                     
                      Nodos sac2 = new Nodos();
                      //System.out.println("el tamño es "+ListaN.size());
                      
                      
                      
                      Iterator aristas = ListaN.keySet().iterator();
                while(aristas.hasNext()){
                    Object nextNodos = aristas.next();
                    
                    sac2 = ListaN.get(nextNodos);//aqui tengo el objeto nodo
                     
                         
                            vec = sac2.getConjunto();
                            
                            //System.out.println("el nodo "+sac2.getId()+"tiene cj "+sac2.getConjunto());
                            if(vec==CM)
                            {
                            sac2.setConjunto(CC);//LE PONGO EL MISMO CONJUNTO A TODOS
                            //System.out.println("Al nodo "+sac2.getId()+" ponemos "+CC);
                            }
                            //System.out.println("que paso");
                      }
                   
                  }
                  
                  
                  
                  if (ListaN.containsKey(saca.getStart())==false && ListaN.containsKey(saca.getEnd())==false)//No hay ningun nodo en el arbol
                  {
                     // System.out.println("AQUI CAYO 2 ");
                  
                  sac.setId(saca.getStart());
                  sac.setConjunto(CJ);
                  sac.setVecino(cad1);
                  ListaN.put(saca.getStart(), sac);
                      //System.out.println("AL nodo "+saca.getStart()+" le ponemos "+CJ);
                  sac1.setId(saca.getEnd());
                  sac1.setConjunto(CJ);
                  sac1.setVecino(cad);
                  ListaN.put(saca.getEnd(), sac1);
                  
                  //System.out.println("AL nodo "+saca.getEnd()+" le ponemos "+CJ);
                  } 
                  
                  if (ListaN.containsKey(saca.getStart())==true && ListaN.containsKey(saca.getEnd())==false)
                  {
                  //System.out.println("AQUI CAYO 3");
                        sac = ListaN.get(saca.getStart());
                        sac.setVecino(cad1);
                        CC = sac.getConjunto();
                        
                        sac1.setId(saca.getEnd());
                        sac1.setConjunto(CC);
                        sac1.setVecino(cad);
                        ListaN.put(saca.getEnd(),sac1); 
                       // System.out.println("EL nodo "+saca.getEnd()+"ponemos cj "+CC);
                  }
                  
                  if(ListaN.containsKey(saca.getStart())==false && ListaN.containsKey(saca.getEnd())==true)
                  {
                      //System.out.println("AQUI CAYO 4");
                  sac = ListaN.get(saca.getEnd());
                  sac.setVecino(cad1);
                        CC = sac.getConjunto();
                        
                        sac1.setId(saca.getStart());
                        sac1.setConjunto(CC);
                        sac1.setVecino(cad);
                        ListaN.put(saca.getStart(),sac1); 
                //System.out.println("EL nodo "+saca.getStart()+"ponemos cj "+CC);
                  }
                  
                  
                        if(K.size()==A.size()-1)
                        {
                         Kruskal = true;   
                        }
                        
                
                  CJ = CJ +1;
                  }
                  else
                  {
                    HACEDOR = true;  
                  }
                  
                  }//fin del while
              
                  int MSTK = 0;
                  
                  System.out.println("AQUI EMPIEZA A IMPRIMIR KRUSKAL");
                  
                  try {
                      String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\AEM\\KRUSKAL.gv";
                      File archivo = new File(ruta);
                      BufferedWriter bw = null;
                      bw = new BufferedWriter(new FileWriter(archivo));
                      bw.write("Graph G {");
                      bw.newLine();
                  
                  
                   
                   Aristas AyI = new Aristas();
                 
                  
                  Iterator aristas = K.keySet().iterator();
                while(aristas.hasNext()){
                    Object nextArista = aristas.next();
                    AyI = K.get(nextArista);
                    
                    
                    
                   MSTK = MSTK +AyI.getPeso();
                    //System.out.println(AyI.getStart()+"--"+AyI.getEnd());
                    bw.write(AyI.getStart()+"--"+AyI.getEnd()+" [label=\""+AyI.getPeso()+"\"]; ");
                    bw.newLine();
                    bw.flush();
                  
                }
                  System.out.println("EL PESO TOTAL MST KRUSKAL = "+MSTK);
                  System.out.println("");
                  bw.write("}");
                      bw.close();
                      
                  } catch (IOException ex) {
                      Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
                  }
                  
                 
                  
       //******************************************************************************************************PRIM
          /*
            String NS;
             int ns;
             boolean  Prim = false;
             boolean VALOR = false;
             String Vecz;
             int vecz;
             String flecha;
             String flechaI;
            
             String crear;
             String crearI;
             
              Stack<Integer> pilaPRIM = new Stack<Integer>();
                
              HashMap<Integer, Aristas> S = new HashMap<>();
              HashMap<String, Aristas> PRIM = new HashMap<>();
              HashMap<String, Aristas> PRIMf = new HashMap<>();
               
            
              ArrayList<Integer> RN = new ArrayList<Integer>();
                int DB = fat+1;
               
         
                 NS = NodoS.getText(); //obtengo el valor del teclado lo mando a S.
                  //System.out.println("El nodo de inicio es "+NS);
                  ns = Integer.parseInt(NS);//convierto el valor "NS" en entero.
                  
                //System.out.println("fat es "+fat);
                   Nodos help = new Nodos();
                   Nodos help3 = new Nodos();
                  
                  
                  Iterator Nodos = A.keySet().iterator();
                while(Nodos.hasNext()){
                    Object nextNodos = Nodos.next();
                    help = A.get(nextNodos);                    
                    
                  help3.setDijstra(fat+1);//Inicializo los nodos en infinito
                }
         
            Nodos help2 = new Nodos();
                
            help2 = A.get(ns);
                
            
                while (Prim ==false){
                    ArrayList<String> Tontita = new ArrayList<String>();
                    Tontita = help2.getVecino();
                  //System.out.println("sus vecinos son  "+Tontita);
                      //System.out.println("EL NODO ES "+help2.getId());
                    for(int t=0;t<Tontita.size();t++){
                 
                          Vecz = Tontita.get(t);
                          vecz = Integer.parseInt(Vecz);
                          
                          //System.out.println("el vecino entero "+vecz);
                          
                          flecha = help2.getId()+"--"+vecz;
                          flechaI = vecz+"--"+help2.getId();
                          
                          //System.out.println("la flecha a buscar "+flecha);  
                          
                            if(PRIMf.containsKey(flecha)==false && PRIMf.containsKey(flechaI)== false)
                            {
                                
                            if (B.containsKey(flecha)==false)
                                {
                                flecha = vecz+"--"+help2.getId();
                                }
                              
                          //System.out.println("considera la flecha "+flecha); 
                           Aristas Bz = new Aristas();
                          Bz = B.get(flecha);   //Aqui obtengo la arista
                                
                           Nodos help1 = new Nodos();
                          help1 = A.get(vecz);
                                
                                 if(RN.contains(vecz)== true)
                   {
                       Nodos hep1 = new Nodos();
                       hep1 = A.get(vecz);
                       if(DB < hep1.getDijstra())
                       {
                        
                        String cre;
                        cre = hep1.getPadre()+"--"+hep1.getId();
                        PRIM.remove(cre);
                       }
                   }
                                 
                                help1.setDijstra(Bz.getPeso());//Aqui asigno el peso de la arista al nodo
                           
                          pilaPRIM.add(help1.getDijstra());//para despuer ordenar los pesos
                            
                          Aristas Bb = new Aristas();
                          
                          Bb.setStart(help2.getId());
                          Bb.setEnd(vecz);
                          Bb.setPeso(Bz.getPeso());
                          S.put(help1.getDijstra(), Bb);//GUARDO PESO Y ARISTA
                            
                            
                            }
                            else
                            {
                                //System.out.println("AQUI ESTOY");
                            }
                            
                    }//Salida del for
                    
                    for(int u =0;u<pilaPRIM.size();u++)
                                      {
                                      //System.out.println("LA PILA "+pilaPRIM.get(u));
                                      DB = Math.min(DB,pilaPRIM.get(u) );
                                  
                                      }
                    
                    //System.out.println("EL VALOR MINIMO "+DB);
                    pilaPRIM.remove(pilaPRIM.indexOf(DB));//LO QUITO DE LA PILA
                    
                    Aristas BN = new Aristas();
                    BN = S.get(DB);//RECUPERO LA ARISTA MINIMA
                    
                    crear = BN.getStart()+"--"+BN.getEnd();
                    crearI = BN.getEnd()+"--"+BN.getStart();
                    //System.out.println("crear es "+crear);
                    
                    
                   
                   Nodos hep = new Nodos();
                   hep = A.get(BN.getEnd());
                   hep.setPadre(BN.getStart()); 
                    
          if(RN.contains(BN.getStart())== true && RN.contains(BN.getEnd())== true)
              
          {
                VALOR = true; 
                //System.out.println("LA ARISTA RECHAZADA "+crear);
                PRIMf.put(crear, BN);
          }
            
                 if(VALOR == false)
                 {
                    BN.setPeso(DB);
                    PRIM.put(crear, BN);
                    PRIMf.put(crear, BN);
                    
                    //System.out.println(crear);//AQUI IMPRIMO EN PANTALLA*************************
                    
                    if(RN.contains(BN.getStart())==false)
                    {
                    RN.add(BN.getStart());
                    }
                    
                    if(RN.contains(BN.getEnd())==false)
                    {
                    RN.add(BN.getEnd());
                    }
                    
                 }
                    
                    //System.out.println("el tamaño es "+PRIM.size());
                    if(PRIM.size()==A.size()-1)
                    {
                    Prim = true;
                    }
                    else
                    {
                        
                        
                        help2 = A.get(BN.getEnd());
                        
                        
                        DB = fat+1;
                        
                        VALOR = false;
                    }
                    
                    
                    
                    
                }//fin de PRIM
              
                
                
                int MSTP = 0;
                
            System.out.println("AQUI EMPIEZA A IMPRIMIR PRIM");
                  
             
           try {
                      String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\AEM\\PRIM.gv";
                      File archivo = new File(ruta);
                      BufferedWriter bw = null;
                      bw = new BufferedWriter(new FileWriter(archivo));
                      bw.write("Graph G {");
                      bw.newLine();
            
            
                Aristas AO = new Aristas();
              
                  
                  Iterator aristas = PRIM.keySet().iterator();
                while(aristas.hasNext()){
                    Object nextArista = aristas.next();
                    AO = PRIM.get(nextArista);
                    
                    
                    MSTP = MSTP + AO.getPeso();
                    //System.out.println(AO.getStart()+"--"+AO.getEnd());
                    bw.write(AO.getStart()+"--"+AO.getEnd()+" [label=\""+AO.getPeso()+"\"]; ");
                    bw.newLine();
                    bw.flush();
                    
                }
                System.out.println("EL PESO TOTAL MST PRIM = "+MSTP);
                System.out.println("");  
                
               bw.write("}");
                      bw.close();
                      
                  } catch (IOException ex) {
                      Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
                  }
                  
             */
      
    }//GEN-LAST:event_GEOGRAFICOActionPerformed

    private void EntraProbaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EntraProbaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EntraProbaActionPerformed

    private void BARABASIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BARABASIActionPerformed
        // TODO add your handling code here:
            String n;
            int x;
            int a=0;
            String g;
            int d;
            double grad;
            double p1;
            double p2;
            double r1;
            int mat;
            String Contiene = null;
            String Ini = null;
            String Fin = null;
            int fat =0;
            int gordo;
            
          
           
            
            n = EntraNodos.getText(); //obtengo el valor del teclado lo mando a n.
            System.out.println("n = "+n);
            
            g = EntraGrado.getText(); //obtengo el valor del teclado lo mando a g.
            
            x = Integer.parseInt(n);//convierto el valor "n" en entero.
            mat =x;
            d = Integer.parseInt(g);
            
            HashMap<Integer, Nodos> A = new HashMap<>();
            HashMap<String, Aristas> B = new HashMap<>();
            
            ArrayList<String> Tonta = new ArrayList<String>();
            HashMap<Integer, Aristas> BK = new HashMap<>();
        HashMap<Integer, Aristas> BKI = new HashMap<>();
        
            ArrayList<Integer> OkGordo = new ArrayList<Integer>(); 
            
            Stack <Integer> pilaf = new Stack<Integer>();
            Stack <Integer> pilak = new Stack<Integer>();
            
            Nodos Charola = new Nodos();
            
              Nodos prueba1 = new Nodos();//Solo para guardar.
              Nodos prueba2 = new Nodos();
            
            for(int i=0; i<x; i++){   //Aqui creo x numero de objetos nodos.
                
                Nodos cosa = new Nodos();
                cosa.setId(i);
                A.put(i, cosa);
              //System.out.println(cosa.getId()); 
                
              prueba1=A.get(i);
                if (i==0){ //El primer nodo solito no hace nada, pobresito!!!!
                
                }
                else{
                    
                
                   for(int j=0; j<i; j++){//Aqui reviso los nodos creados anteriormente.
                    prueba2=A.get(j);
                       
                    
                String cadena1;
                String cadena2;
                cadena1 = Integer.toString(prueba2.getId());
                cadena2 = Integer.toString(prueba1.getId());
                
                ArrayList Tonta1;
                ArrayList Tonta2;//Para el relajo de los nodos adyacentes.
                
                Tonta1=prueba1.getVecino();
                Tonta2=prueba2.getVecino();
                
                    
               //Nodos cosa1 = new Nodos();
               
               
               Tonta = prueba2.Vecinos;
               grad = Tonta.size();// El tamaño del arreglo es el grado del nodo!!!
              
                //System.out.println("El grado del nodo "+grad);
                p2 =  grad/d;  
                p1 = 1 - (p2);
                
                       //System.out.println("La probabilidad es "+p1);
                
               // if(grad < d){//Aqui reviso que al nodo se le puedan seguir agregando aristas
                       
                Random r = new Random();    //Creo un random
                r1 = (double)(r.nextDouble() *10);      //hago entero el random lo limito a x.
                r1 = r1/10;
                    //System.out.println("El random es "+r1);
                
                    if(p1>r1){//Comparo probabilidades para ir haciendo las aristas.
                     
                Aristas cosita = new Aristas();
                
                cosita.setStart(prueba1.getId());
                cosita.setEnd(prueba2.getId());
                cosita.setName(a);
                
                
                
                Random vo = new Random();    //Creo un random
                        gordo = (int)(vo.nextDouble() *1000);
                       
                        while (OkGordo.contains(gordo)==true)//PARA EVITAR QUE SE REPITAN LOS PESOS
                        {
                        Random v2 = new Random();    //Creo un random
                        gordo = (int)(v2.nextDouble() *1000);
                            
                        }
                        
                          //System.out.println("el peso es "+gordo);
                        //cosita.setValor(Ini+"--"+Fin);
                        OkGordo.add(gordo);
                          cosita.setPeso(gordo);//AQUI ASIGNO EL PESO A LAS ARISTAS
                         fat = fat + gordo;
                  
                
                
                
                
                
                  
                  Ini = String.valueOf(prueba1.getId());
                Fin = String.valueOf(prueba2.getId());
                Contiene =Fin +"--"+Ini;

                B.put(Contiene, cosita);
                BK.put(gordo, cosita);//para KRUSKAL
                BKI.put(gordo, cosita);//PARA kruskal inverso
                pilaf.add(gordo);//para KRUSKAL
                pilak.add(gordo);//PARA kruskal inverso
                a=a+1;
                
                prueba1.setVecino(cadena1);
                prueba2.setVecino(cadena2);
                    }
                    
                    
                //}
                        
                   }    
                        
                }
            }
          
            try {
                      String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos PARA DIJSTRA\\BARABASI.gv";
                      File archivo = new File(ruta);
                      BufferedWriter bw = null;
                      bw = new BufferedWriter(new FileWriter(archivo));
                      bw.write("graph G {");
                      bw.newLine();
                  
                  
                   Aristas Ayuda = new Aristas();
                   
                  
                  
                  Iterator aristas = B.keySet().iterator();
                while(aristas.hasNext()){
                    Object nextArista = aristas.next();
                    Ayuda = B.get(nextArista);                    
                    //System.out.println(Ayuda.getStart()+"--"+Ayuda.getEnd()+" [label=\""+Ayuda.getPeso()+"\"]; ");
                    bw.write(Ayuda.getStart()+"--"+Ayuda.getEnd()+" [label=\""+Ayuda.getPeso()+"\"]; ");
                    bw.newLine();
                    bw.flush();
                  
                }
                  
                  bw.write("}");
                      bw.close();
                      
                  } catch (IOException ex) {
                      Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
                  }
            
            
            /*Aristas imprime = new Aristas();
            
              try {
            String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos\\BARABASI.gv";
            File archivo = new File(ruta);
            BufferedWriter bw = null;
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write("Graph G {");
            bw.newLine();
            
            
             for (int l=0; l<a; l++) {
              
                    imprime = B.get(l);
                    bw.write(imprime.getStart()+"--"+imprime.getEnd());
                    bw.newLine();
                    bw.flush();
                    
                     System.out.println(imprime.getStart()+"--"+imprime.getEnd()+" [label=\""+imprime.getName()+"\"]; ");
            } 
             bw.write("}");
              bw.close();
            
                 } catch (IOException ex) {
            Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
        } */
              //************************************************************************BFS
              /*Nodos help = new Nodos();
                  Nodos help1 = new Nodos();
                  Nodos help2 = new Nodos();
                  String S;
                  int s;
                  int tail;
                  int v;
                  String Vec;
                  int vec;
                  int h =0;
                  
                  S = SOURCE.getText(); //obtengo el valor del teclado lo mando a S.
                  System.out.println("El nodo raiz es "+S);
                  s = Integer.parseInt(S);//convierto el valor "S" en entero.
                  
                  
                  for(int i=0; i<mat; i++){
                      help = A.get(i);
                      
                      help.setVisit(false); // Inicializo todos los nodos en falso
                  }
                  
                  Queue<Integer> cola = new LinkedList();// Defino la cola
                  ArrayList<String> Tonta1 = new ArrayList<String>();
                  HashMap<Integer, ARBOL_BFS> C = new HashMap<>();
                  
                  
                  
                  tail = s;
                  help1 = A.get(s);
                  cola.add(tail);
                  
                  
                  while(cola.peek()!= null){
                      
                      // System.out.println("El nodo es "+help1.getId());
                      help1 = A.get(cola.peek());
                      tail = cola.peek();
                      Tonta = help1.getVecino();
                      //System.out.println("Los hijos son: "+Tonta);
                      v = Tonta.size();
                      
                      for(int i=0; i<v; i++){
                          ARBOL_BFS tree = new ARBOL_BFS();
                          Vec = Tonta.get(i);
                          vec = Integer.parseInt(Vec);
                          help2 = A.get(vec);
                          
                          //System.out.println("El valor padre "+help1.getVisit());
                          //System.out.println("El valor hijo "+help2.getVisit());
                          if(help2.getVisit()== false){
                              
                              tree.setEntra(tail);
                              tree.setSale(vec);
                              tree.setName(h);
                              
                              cola.add(vec);
                              C.put(h, tree);
                              //System.out.println(tree.getEntra()+"--"+tree.getSale());
                              help2.setVisit(true);
                              h = h+1;
                          }
                          else{
                              
                          }
                          
                      }
                      
                      help1.setVisit(true);
                      cola.remove(tail);
                  }
                  
                  //System.out.println("h vale " +h);
                  int hay;
                  hay = h;
                  
                  ARBOL_BFS print = new ARBOL_BFS();
                  
                  try { 
                  
                  String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos\\BFS.gv";
                  File archivo1 = new File(ruta);
                  BufferedWriter bw1 = null;
                  bw1 = new BufferedWriter(new FileWriter(archivo1));
                  bw1.write("Graph G {");
                  bw1.newLine();
                  
                      System.out.println("hay vale "+hay);
                      
                  for (int ji=0; ji<hay; ji++) {
                      
                      print = C.get(ji);
                      
                      System.out.println(print.getEntra()+"--"+print.getSale());
                      bw1.write(print.getEntra()+"--"+print.getSale());
                      bw1.newLine();
                      bw1.flush();
                  }
                  
                  
                  
                  bw1.write("}");
                  
                  bw1.close();
                  
                  
                  
                  
              } catch (IOException ex) {
            Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
              }*/
         //***************************************************************************DFS
         /*String s;
                    int SDFS;
                    Nodos help = new Nodos();
                    Nodos help1 = new Nodos();
                    Nodos help2 = new Nodos();
                    int v;
                    String Vec;
                    int vec;
                    int Deep;
                 

                    s = SourceDFS.getText(); //obtengo el valor del teclado lo mando a S.
                  System.out.println("El nodo raiz es "+s);
                  SDFS = Integer.parseInt(s);//convierto el valor "S" en entero.
                  
                  
                  for(int i=0; i<mat; i++){
                      help = A.get(i);
                      
                      help.setVisit(false); // Inicializo todos los nodos en falso
                  }
                  Deep = SDFS; 
                 System.out.println("estoy mandando "+Deep);
                  ARBOL_DFS cos = new ARBOL_DFS();
                  
                  help1 = A.get(Deep);
                 HashMap<Integer, Aristas> HashD = new HashMap<>();
                  cos.setDFS(help1,A,HashD);
                 
                 
                
                HashD = cos.getDFS();
                System.out.println("el tamaño es "+HashD.size());
                Aristas ji = new Aristas();
              
                
                try { 
                  
                  String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos\\DFS.gv";
                  File archivo3 = new File(ruta);
                  BufferedWriter bw2 = null;
                  bw2 = new BufferedWriter(new FileWriter(archivo3));
                  bw2.write("Graph G {");
                  bw2.newLine();

                Iterator aristas = HashD.keySet().iterator();
                while(aristas.hasNext()){
                    Object nextArista = aristas.next();
                    ji = HashD.get(nextArista);                    
                    System.out.println(ji.getStart()+"--"+ji.getEnd());
                     bw2.write(ji.getStart()+"--"+ji.getEnd());
                      bw2.newLine();
                      bw2.flush();
                }
                 bw2.write("}");
                  
                  bw2.close();
                  
                  
              } catch (IOException ex) {
            Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
        }*/
         //********************************************************************************DFS ITERATIVO
         /*Nodos help = new Nodos();
                  Nodos help1 = new Nodos();
                  Nodos help2 = new Nodos();
                  String S;
                  int s;
                  int duracell;
                  int v;
                  String Vec;
                  int vec;
                  int h =0;
                  int ki = 0;
                  HashMap<Integer, DFS> D = new HashMap<>();
                  S = SourceDFS.getText(); //obtengo el valor del teclado lo mando a S.
                  System.out.println("El nodo raiz es "+S);
                  s = Integer.parseInt(S);//convierto el valor "S" en entero.
                  
                  
                  for(int j=0; j<mat; j++){
                      help = A.get(j);
                      
                      help.setBool(0); // Inicializo todos los nodos en falso
                  }
                  
                    Stack<Integer> pila = new Stack<Integer>();  // Defino la pila
                  ArrayList<String> Tontah = new ArrayList<String>();
                  String hak;
                  int kj;
                  int hh = 1;
                  int fg;
                int def;
                
                  
                  
                  duracell = s;
                  help1 = A.get(s);
                  pila.addElement(duracell);
                  help1.setBool(1);// marco el nodo como visitado
                  
                  
                  while(pila.empty()==false){
                      
                      //System.out.println("El nodo es "+help1.getId());
                      help1 = A.get(pila.peek());//saco de la pila el nodo
                      duracell = pila.peek();// aqui tengo el numero del nodo que saque de la pila
                      Tontah = help1.getVecino();// aqui saco la lista de nodos adyacentes
                      //System.out.println("El valor ultimo "+pila.peek());
                      //System.out.println("Los vecinos son: "+Tontah);
                      v = Tontah.size();// saco el tamaño de la lista
                      
                      if(ki>=v){
                          pila.remove(pila.peek());
                          
                          help1 = A.get(pila.peek());//saco de la pila el nodo
                      duracell = pila.peek();// aqui tengo el numero del nodo que saque de la pila
                      Tontah = help1.getVecino();// aqui saco la lista de nodos adyacentes
                      //System.out.println("El valor ultimo "+pila.peek());
                      //System.out.println("Los vecinos son: "+Tontah);
                      v = Tontah.size();// saco el tamaño de la lista
                      ki=0;
                          
                      }
                   
                          
                          Vec = Tontah.get(ki);
                          vec = Integer.parseInt(Vec);// tengo el valor entero del primer nodo adyacente
                        
                          
                     
                          help2 = A.get(vec);// aqui saco el nodo vecino obtenido
                          
                         
                          //System.out.println("El tamaño de la pila "+pila.size());
                          
                          
                          if(help2.getBool()==0){// pregunto si el nodo adyacente ya esta marcado
                              DFS tree = new DFS();
                              
                              tree.setEntra(duracell);//coloco el valor de entrada de la arista
                              tree.setSale(vec);//coloco el valor de salida
                              tree.setName(h);
                              System.out.println("h vale "+h);
                              pila.addElement(vec);//meto el nodo adyacente a la pila
                              
                         
                              //System.out.println(tree.getEntra()+"--"+tree.getSale());
                              help2.setVisit(true);//marco al nodo adyacente como visitado
                              D.put(h, tree);// meto la arista al hash
                              
                              h= h+1;
                              
                              help2.setBool(1);
                              ki = 0;
                           
                          }
                          else{
                           
                                    ki = ki+1;
                                  //System.out.println("no acepto "+duracell+" , "+vec);
                                  for(int lk=0; lk<v; lk++){
                                    hak = Tontah.get(lk);
                                    kj = Integer.parseInt(hak);
                              
                                    Nodos N = new Nodos();     
                                    N = A.get(kj);
                            
                                    fg = N.getBool();
          
                                    hh = hh*fg;
                                  }
                                  
                                      //System.out.println("hh vale"+hh);
                                                if(hh==1){
                                                    pila.remove(pila.peek());
                                                     ki = 0; 
                                                      //System.out.println("ahora la pila vale "+pila.peek());
                                                           }
                         
                                         
                              
                          }
                          
                        def = D.size(); 
                       if(def==mat-1){
                      pila.clear();
                  }   
                     
               
                  }
         
         //**************parte para imprimir
         DFS print = new DFS();
                  
                  try { 
                  
                  String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos\\DFSiter.gv";
                  File archivo12 = new File(ruta);
                  BufferedWriter bw1 = null;
                  bw1 = new BufferedWriter(new FileWriter(archivo12));
                  bw1.write("Graph G {");
                  bw1.newLine();
                  
                      System.out.println("hay vale "+h);
                      
                  for (int ji=0; ji<h; ji++) {
                      
                      print = D.get(ji);
                      
                      System.out.println(print.getEntra()+"--"+print.getSale()+" [label=\""+print.getName()+"\"]; ");
                      
                      bw1.write(print.getEntra()+"--"+print.getSale()+" [label=\""+print.getName()+"\"]; ");
                      bw1.newLine();
                      bw1.flush();
                  }
                  
                  
                  
                  bw1.write("}");
                  
                  bw1.close();
                  
                  
                  
                  
              } catch (IOException ex) {
            Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
        }*/
         //*****************************************************************************************DIJSTRA
          /* Nodos help = new Nodos();
           Nodos help3 = new Nodos();
               
                String NS;
                String NT;
                int ns;
                int nt;
                String Vec;
                int vec;
               String flecha;
               
               String crear;
               boolean Dijstra = false;
               double P;
               double suma = 0.0;
               double min;
             boolean IMPRIME = false;
             
             
              
                ArrayList<String> Tontita = new ArrayList<String>();
                
            
                double DB = fat+1;
                Aristas B1 = new Aristas();
         
                 NS = NodoS.getText(); //obtengo el valor del teclado lo mando a S.
                  System.out.println("El nodo de inicio es "+NS);
                  ns = Integer.parseInt(NS);//convierto el valor "NS" en entero.
                  
                  NT = NodoT.getText(); //obtengo el valor del teclado lo mando a S.
                  System.out.println("El nodo de final es "+NT);
                  nt = Integer.parseInt(NT);//convierto el valor "NT" en entero.
                  
                //System.out.println("fat es "+fat);
                   
                  
                  
                  Iterator Nodos = A.keySet().iterator();
                while(Nodos.hasNext()){
                    Object nextNodos = Nodos.next();
                    help = A.get(nextNodos);                    
                    
                  //help3.setDijstra(fat+1);//Inicializo los nodos en infinito
                }
         
                HashMap<Double, Nodos> Order = new HashMap<>();  
                HashMap<Integer, Nodos> WAY = new HashMap<>();
                HashMap<Integer, Double> WAY2 = new HashMap<>();
                HashMap<String, Aristas> S = new HashMap<>();
                ArrayList<String> VerA = new ArrayList<String>();
                ArrayList<Integer> VerN = new ArrayList<Integer>();
                
                       
                 
                 Stack<Double> pila = new Stack<Double>();
                
                help = A.get(ns);
              VerN.add(ns);
           
                P = 0.0;
                  
                
            while (Dijstra ==false){
                    Tontita = help.getVecino();
                  //System.out.println("sus vecinos son  "+Tontita);
                  
                  
                      //System.out.println("el tamaño de tontita"+Tontita.size());
                    for(int t=0;t<Tontita.size();t++){
                 
                          Vec = Tontita.get(t);
                          vec = Integer.parseInt(Vec);
                          
                          //System.out.println("el vecino entero"+vec);
                          flecha = help.getId()+"->"+vec;
                          
                          
                          
                            if(VerA.contains(flecha)==false||VerN.contains(vec)==false)
                            {
                                if(B.containsKey(flecha)==true)
                                {
                                
                          //System.out.println("la flecha a buscar"+flecha);
                          B1 = B.get(flecha);   //Aqui obtengo la arista
                                //System.out.println("LA ARISTA ES "+B1); 
                                //System.out.println("EL VALOR ES "+B.containsKey(flecha));
                           Nodos help1 = new Nodos();
                          help1 = A.get(vec);
                          suma = B1.getPeso()+P;
                                    //System.out.println("la suma es "+suma);
                                 if(suma<help1.getDijstra())
                                {
                               // help1.setDijstra(suma);//Aqui asigno el peso de la arista al nodo
                                }
                          
                          help1.setPadre(help.getId());
                          Order.put(suma, help1);//Para recuperar el nodo posteriormente
                          WAY2.put(help1.getId(), suma);//Este HASH ES PARA RECUPERAR EL VALOR DE DIJSTRA      
                          pila.push(suma);//para despuer ordenar los pesos
                          
                                }
                            }
                            
                    }//Salida del for
                    if (pila.size()!=0)
                    {
                        //System.out.println("EL TAMAÑO D ELA PILA "+pila.size());
                                      for(int u =0;u<pila.size();u++)
                                      {
                                     // System.out.println("es "+pila.get(u));
                                      DB = Math.min(DB,pila.get(u) );
                                  
                                      }
                                    
                                // System.out.println("El valor minimo es "+DB);
                                 pila.remove(pila.indexOf(DB));
                  
                  Nodos PS = new Nodos();
                  
                  PS = Order.get(DB);
                  
                  crear = PS.getPadre()+"->"+PS.getId();
                  if(S.containsKey(crear)==false)
                  {
                  System.out.println(crear);
                  Aristas Pon = new Aristas();
                  Aristas Mira = new Aristas();
                  
                  Pon.setStart(PS.getPadre());
                  Pon.setEnd(PS.getId());
                  Mira = B.get(crear);
                  Pon.setPeso(Mira.getPeso());
                  
                  S.put(crear, Pon);//Aqui gusrdo aristas
                  PS.setDAD(PS.getPadre());//AQUI VOY METIENDO LOS PADRES
                  WAY.put(PS.getId(), PS);//Aqui guardo nodos
                  
                  VerA.add(crear);//Para verificar las aristas
                  VerN.add(PS.getId());//Para verificar los nodos que no se regrese
                  
                                if(PS.getId()==nt){
                                Dijstra = true;
                                    //System.out.println("No mames si llego");
                                    System.out.println("");
                                }
                                else{
                                help = A.get(PS.getId());
                                DB = fat +1;
                                P = suma;
                                
                                }
                  }
                  if(PS.getId()==nt){
                                Dijstra = true;
                                    System.out.println("No mames, si llego!!!!");
                                    System.out.println("");
                                }
                                else{
                                help = A.get(PS.getId());
                                DB = fat +1;
                                
                                }
                  
                    }
                    else
                    {
                        System.out.println("NO ENCONTRE CAMINO!!");
                        Dijstra = true;
                    }
                  
            }//Salida del while
            
            //**************************************************PARA IMPRIMIR EL CAMINO MAS CORTO
            boolean imprime= false;
           
            
            ArrayList<Integer> VN = new ArrayList<Integer>();
            ArrayList<Integer> pt = new ArrayList<Integer>();
            
            
            Nodos PRO =new Nodos();
               
                boolean DAD = false;
                int b=0;
                double pes;
                double DJ=0.0;
                double OPV;
               
            Aristas Ayu = new Aristas();
            
             PRO = WAY.get(nt);
             
          
        
                  try{
                      String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\DIJSTRA.gv";
                      File archivo = new File(ruta);
                      BufferedWriter bw = null;
                      bw = new BufferedWriter(new FileWriter(archivo));
                      bw.write("digraph G {");
                      bw.newLine();
                    
                  while(imprime==false){
                    
                   pt = PRO.getDAD();
                    //System.out.println("Los padres son: "+pt);
                    
                while(DAD == false)
                {  
                
                
                        if(VN.contains(pt.get(b))==false)
                        {
                        
                        VN.add(PRO.getId());
                        DAD=true;
                        }
                        else
                        {
                        b=b+1;    
                        }
                
                }
                
               Ayu = B.get(pt.get(b)+"->"+PRO.getId());
              
                System.out.println(pt.get(b)+"->"+PRO.getId());
                bw.write(pt.get(b)+"->"+PRO.getId());
                Ayu = B.get(pt.get(b)+"->"+PRO.getId());
                OPV = Ayu.getPeso();
                DJ = DJ +OPV;
                bw.newLine();
                bw.flush();
                
                    bw.newLine();
                    bw.flush();
                    
                if(pt.get(b)==ns)
                    {
                      
                        imprime = true;
                    }
                    else
                    {
                    PRO = WAY.get(pt.get(b));
                    b=0;
                    }
            }
                 
                  System.out.println(ns+" [label=\""+0.0+"\"]; ");
                    bw.write(ns+" [label=\""+0.0+"\"]; ");
                    
                 
                    System.out.println(nt+" [label=\""+"nodo_"+nt+"("+DJ+")"+"\"]; ");
                    bw.write(nt+" [label=\""+"nodo_"+nt+"("+DJ+")"+"\"]; ");
                  
                  bw.write("}");
                      bw.close();
                      
                  } catch (IOException ex) {
                      Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
                  }*/
    
          //**********************************************************************************************KRUSKAL
                    int MAX = 0;
                    Stack<Integer> orden = new Stack<Integer>();
                    HashMap<String, Aristas> K = new HashMap<>();
                    String raya;
                    boolean Kruskal = false;
                    HashMap<Integer, Nodos> ListaN = new HashMap<>();
                    int cont = 1;
                    String cad;
                  String cad1;
                  boolean HACEDOR = true;
                  int CJ = 0; 
                  int CC;
                  String Vec; 
                  int vec;
                  int Peso;
                  
                  while(pilaf.empty()==false){
                    for(int o=0; o<pilaf.size();o++)
                  {
                  MAX = Math.max(MAX, pilaf.get(o));
                  }

           //System.out.println("max es "+MAX);
           orden.add(MAX);      //EN LA PILA orden se guardaran los valores en orden de los pesos
           pilaf.remove(pilaf.indexOf(MAX));
           MAX = 0;
                  } 
                  
                  //System.out.println("el primero es "+orden.peek());
                  
                  
                  
                  while(Kruskal == false)
                  {
                  Aristas saca = new Aristas();
                      //System.out.println("EL VALOR SIGUIENTE ES "+orden.peek());
                      Peso = orden.peek();
                  saca = BK.get(orden.pop());
                  
                  raya = saca.getStart()+"--"+saca.getEnd();
                      
                  if (ListaN.containsKey(saca.getStart())==true && ListaN.containsKey(saca.getEnd())==true)
                  {    
                  //************************************************INICIA PRUEBA
                     //System.out.println("PONDRA "+raya);
                 Nodos pru = new Nodos();
                 Nodos pru1 = new Nodos();
                 
                 pru = ListaN.get(saca.getStart());
                 pru1 = ListaN.get(saca.getEnd());
                      //System.out.println("LOS CJ "+pru.getConjunto()+" y "+pru1.getConjunto());
                      //System.out.println("");
                    if(pru.getConjunto()== pru1.getConjunto())
                    {
                     HACEDOR = false;
                        //System.out.println("SI PONGO ESTA ARISTA SE HARA UN CICLO");
                        //System.out.println(raya);
                    }
                    
                  //***********************************************FIN DE PRUEBA
                 }
                  
                  if(HACEDOR == true)
                  {
                 //System.out.println(raya);//AQUI SE IMPRIMEEEEEEE
                  
                  saca.setPeso(Peso);
                  K.put(raya, saca);
                  
                  Nodos sac = new Nodos();
                  Nodos sac1 = new Nodos();
                  
                  cad= Integer.toString(saca.getStart());
                  cad1= Integer.toString(saca.getEnd());
                  
                  if (ListaN.containsKey(saca.getStart())==true && ListaN.containsKey(saca.getEnd())==true)
                  {
                      //System.out.println("AQUI CAYO 1");
                   sac = ListaN.get(saca.getStart());
                   sac.setVecino(cad1);
                        CC = sac.getConjunto();
                        
                      sac1 = ListaN.get(saca.getEnd());
                        sac1.setVecino(cad);
                        int CM =sac1.getConjunto();
                        
                       //HAY QUE PONERLOS A TODOS LOS DEMAS
                       
                     
                      Nodos sac2 = new Nodos();
                      //System.out.println("el tamño es "+ListaN.size());
                      
                      
                      
                      Iterator aristas = ListaN.keySet().iterator();
                while(aristas.hasNext()){
                    Object nextNodos = aristas.next();
                    
                    sac2 = ListaN.get(nextNodos);//aqui tengo el objeto nodo
                     
                         
                            vec = sac2.getConjunto();
                            
                            //System.out.println("el nodo "+sac2.getId()+"tiene cj "+sac2.getConjunto());
                            if(vec==CM)
                            {
                            sac2.setConjunto(CC);//LE PONGO EL MISMO CONJUNTO A TODOS
                            //System.out.println("Al nodo "+sac2.getId()+" ponemos "+CC);
                            }
                            //System.out.println("que paso");
                      }
                   
                  }
                  
                  
                  
                  if (ListaN.containsKey(saca.getStart())==false && ListaN.containsKey(saca.getEnd())==false)//No hay ningun nodo en el arbol
                  {
                     // System.out.println("AQUI CAYO 2 ");
                  
                  sac.setId(saca.getStart());
                  sac.setConjunto(CJ);
                  sac.setVecino(cad1);
                  ListaN.put(saca.getStart(), sac);
                      //System.out.println("AL nodo "+saca.getStart()+" le ponemos "+CJ);
                  sac1.setId(saca.getEnd());
                  sac1.setConjunto(CJ);
                  sac1.setVecino(cad);
                  ListaN.put(saca.getEnd(), sac1);
                  
                  //System.out.println("AL nodo "+saca.getEnd()+" le ponemos "+CJ);
                  } 
                  
                  if (ListaN.containsKey(saca.getStart())==true && ListaN.containsKey(saca.getEnd())==false)
                  {
                  //System.out.println("AQUI CAYO 3");
                        sac = ListaN.get(saca.getStart());
                        sac.setVecino(cad1);
                        CC = sac.getConjunto();
                        
                        sac1.setId(saca.getEnd());
                        sac1.setConjunto(CC);
                        sac1.setVecino(cad);
                        ListaN.put(saca.getEnd(),sac1); 
                       // System.out.println("EL nodo "+saca.getEnd()+"ponemos cj "+CC);
                  }
                  
                  if(ListaN.containsKey(saca.getStart())==false && ListaN.containsKey(saca.getEnd())==true)
                  {
                      //System.out.println("AQUI CAYO 4");
                  sac = ListaN.get(saca.getEnd());
                  sac.setVecino(cad1);
                        CC = sac.getConjunto();
                        
                        sac1.setId(saca.getStart());
                        sac1.setConjunto(CC);
                        sac1.setVecino(cad);
                        ListaN.put(saca.getStart(),sac1); 
                //System.out.println("EL nodo "+saca.getStart()+"ponemos cj "+CC);
                  }
                  
                  
                        if(K.size()==A.size()-1)
                        {
                         Kruskal = true;   
                        }
                        
                
                  CJ = CJ +1;
                  }
                  else
                  {
                    HACEDOR = true;  
                  }
                  
                  }//fin del while
              
                  int MSTK = 0;
                  
                  System.out.println("AQUI EMPIEZA A IMPRIMIR KRUSKAL");
                  
                  try {
                      String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos PARA DIJSTRA\\KRUSKAL.gv";
                      File archivo = new File(ruta);
                      BufferedWriter bw = null;
                      bw = new BufferedWriter(new FileWriter(archivo));
                      bw.write("Graph G {");
                      bw.newLine();
                  
                  
                   
                   Aristas AyI = new Aristas();
                 
                  
                  Iterator aristas = K.keySet().iterator();
                while(aristas.hasNext()){
                    Object nextArista = aristas.next();
                    AyI = K.get(nextArista);
                    
                    
                    
                   MSTK = MSTK +AyI.getPeso();
                    //System.out.println(AyI.getStart()+"--"+AyI.getEnd());
                    bw.write(AyI.getStart()+"--"+AyI.getEnd()+" [label=\""+AyI.getPeso()+"\"]; ");
                    bw.newLine();
                    bw.flush();
                  
                }
                  System.out.println("EL PESO TOTAL MST KRUSKAL = "+MSTK);
                  System.out.println("");
                  bw.write("}");
                      bw.close();
                      
                  } catch (IOException ex) {
                      Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
                  }
                  
                 
                  
       //******************************************************************************************************PRIM
         /* 
            String NS;
             int ns;
             boolean  Prim = false;
             boolean VALOR = false;
             String Vecz;
             int vecz;
             String flecha;
             String flechaI;
            
             String crear;
             String crearI;
             
              Stack<Integer> pilaPRIM = new Stack<Integer>();
                
              HashMap<Integer, Aristas> S = new HashMap<>();
              HashMap<String, Aristas> PRIM = new HashMap<>();
              HashMap<String, Aristas> PRIMf = new HashMap<>();
               
            
              ArrayList<Integer> RN = new ArrayList<Integer>();
                int DB = fat+1;
               
         
                 NS = NodoS.getText(); //obtengo el valor del teclado lo mando a S.
                  //System.out.println("El nodo de inicio es "+NS);
                  ns = Integer.parseInt(NS);//convierto el valor "NS" en entero.
                  
                //System.out.println("fat es "+fat);
                   Nodos help = new Nodos();
                   Nodos help3 = new Nodos();
                  
                  
                  Iterator Nodos1 = A.keySet().iterator();
                while(Nodos1.hasNext()){
                    Object nextNodos = Nodos1.next();
                    help = A.get(nextNodos);                    
                    
                  help3.setDijstra(fat+1);//Inicializo los nodos en infinito
                }
         
            Nodos help2 = new Nodos();
                
            help2 = A.get(ns);
                
            
                while (Prim ==false){
                    ArrayList<String> Tontita = new ArrayList<String>();
                    Tontita = help2.getVecino();
                  //System.out.println("sus vecinos son  "+Tontita);
                      //System.out.println("EL NODO ES "+help2.getId());
                    for(int t=0;t<Tontita.size();t++){
                 
                          Vecz = Tontita.get(t);
                          vecz = Integer.parseInt(Vecz);
                          
                          //System.out.println("el vecino entero "+vecz);
                          
                          flecha = help2.getId()+"--"+vecz;
                          flechaI = vecz+"--"+help2.getId();
                          
                          //System.out.println("la flecha a buscar "+flecha);  
                          
                            if(PRIMf.containsKey(flecha)==false && PRIMf.containsKey(flechaI)== false)
                            {
                                
                            if (B.containsKey(flecha)==false)
                                {
                                flecha = vecz+"--"+help2.getId();
                                }
                              
                          //System.out.println("considera la flecha "+flecha); 
                           Aristas Bz = new Aristas();
                          Bz = B.get(flecha);   //Aqui obtengo la arista
                                //System.out.println("LA ARISTA ES "+Bz);
                           Nodos help1 = new Nodos();
                          help1 = A.get(vecz);
                                
                                 if(RN.contains(vecz)== true)
                   {
                       Nodos hep1 = new Nodos();
                       hep1 = A.get(vecz);
                       if(DB < hep1.getDijstra())
                       {
                        
                        String cre;
                        cre = hep1.getPadre()+"--"+hep1.getId();
                        PRIM.remove(cre);
                       }
                   }
                                 
                                help1.setDijstra(Bz.getPeso());//Aqui asigno el peso de la arista al nodo
                           
                          pilaPRIM.add(help1.getDijstra());//para despuer ordenar los pesos
                            
                          Aristas Bb = new Aristas();
                          
                          Bb.setStart(help2.getId());
                          Bb.setEnd(vecz);
                          Bb.setPeso(Bz.getPeso());
                          S.put(help1.getDijstra(), Bb);//GUARDO PESO Y ARISTA
                            
                            
                            }
                            else
                            {
                                //System.out.println("AQUI ESTOY");
                            }
                            
                    }//Salida del for
                    
                    for(int u =0;u<pilaPRIM.size();u++)
                                      {
                                      //System.out.println("LA PILA "+pilaPRIM.get(u));
                                      DB = Math.min(DB,pilaPRIM.get(u) );
                                  
                                      }
                    
                    //System.out.println("EL VALOR MINIMO "+DB);
                    pilaPRIM.remove(pilaPRIM.indexOf(DB));//LO QUITO DE LA PILA
                    
                    Aristas BN = new Aristas();
                    BN = S.get(DB);//RECUPERO LA ARISTA MINIMA
                    
                    crear = BN.getStart()+"--"+BN.getEnd();
                    crearI = BN.getEnd()+"--"+BN.getStart();
                    //System.out.println("crear es "+crear);
                    
                    
                   
                   Nodos hep = new Nodos();
                   hep = A.get(BN.getEnd());
                   hep.setPadre(BN.getStart()); 
                    
          if(RN.contains(BN.getStart())== true && RN.contains(BN.getEnd())== true)
              
          {
                VALOR = true; 
                //System.out.println("LA ARISTA RECHAZADA "+crear);
                PRIMf.put(crear, BN);
          }
            
                 if(VALOR == false)
                 {
                    BN.setPeso(DB);
                    PRIM.put(crear, BN);
                    PRIMf.put(crear, BN);
                    
                    //System.out.println(crear);//AQUI IMPRIMO EN PANTALLA*************************
                    
                    if(RN.contains(BN.getStart())==false)
                    {
                    RN.add(BN.getStart());
                    }
                    
                    if(RN.contains(BN.getEnd())==false)
                    {
                    RN.add(BN.getEnd());
                    }
                    
                 }
                    
                    //System.out.println("el tamaño es "+PRIM.size());
                    if(RN.size()==A.size())
                    {
                    Prim = true;
                    }
                    else
                    {
                        
                        
                        help2 = A.get(BN.getEnd());
                        
                        
                        DB = fat+1;
                        
                        VALOR = false;
                    }
                    
                    
                    
                    
                }//fin de PRIM
              
                
                
                int MSTP = 0;
                
            System.out.println("AQUI EMPIEZA A IMPRIMIR PRIM");
                  
             
           try {
                      String ruta = "C:\\Users\\ivaro_000\\Desktop\\Proyectos Grafos - Algoritmos\\Grafos PARA DIJSTRA\\PRIM.gv";
                      File archivo = new File(ruta);
                      BufferedWriter bw = null;
                      bw = new BufferedWriter(new FileWriter(archivo));
                      bw.write("Graph G {");
                      bw.newLine();
            
            
                Aristas AO = new Aristas();
              
                  
                  Iterator aristas = PRIM.keySet().iterator();
                while(aristas.hasNext()){
                    Object nextArista = aristas.next();
                    AO = PRIM.get(nextArista);
                    
                    
                    MSTP = MSTP + AO.getPeso();
                    //System.out.println(AO.getStart()+"--"+AO.getEnd());
                    bw.write(AO.getStart()+"--"+AO.getEnd()+" [label=\""+AO.getPeso()+"\"]; ");
                    bw.newLine();
                    bw.flush();
                    
                }
                System.out.println("EL PESO TOTAL MST PRIM = "+MSTP);
                System.out.println("");  
                
               bw.write("}");
                      bw.close();
                      
                  } catch (IOException ex) {
                      Logger.getLogger(Creator.class.getName()).log(Level.SEVERE, null, ex);
                  }
                  
      */
    }//GEN-LAST:event_BARABASIActionPerformed

    private void EntraGradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EntraGradoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EntraGradoActionPerformed

    private void SourceDFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SourceDFSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SourceDFSActionPerformed

    private void NodoSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NodoSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NodoSActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Creator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Creator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Creator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Creator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Creator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BARABASI;
    private javax.swing.JToggleButton ERDOS;
    private javax.swing.JTextField EntraAristas;
    private javax.swing.JTextField EntraGrado;
    private javax.swing.JTextField EntraNodos;
    private javax.swing.JTextField EntraProba;
    private javax.swing.JButton GEOGRAFICO;
    private javax.swing.JButton GILBERT;
    private javax.swing.JTextField NodoS;
    private javax.swing.JTextField NodoT;
    private javax.swing.JTextField SOURCE;
    private javax.swing.JTextField SourceDFS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
}
